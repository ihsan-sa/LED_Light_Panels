
Simple_LED_Panel_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003894  08003894  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003894  08003894  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003894  08003894  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003894  08003894  00004894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800389c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080038a8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080038a8  00005160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2a6  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200e  00000000  00000000  000142da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  000162e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a43  00000000  00000000  00016fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012f0c  00000000  00000000  00017a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc18  00000000  00000000  0002a937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a4b8  00000000  00000000  0003a54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4a07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  000b4a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b7958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037a0 	.word	0x080037a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080037a0 	.word	0x080037a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fc18 	bl	8000c2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f84f 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f9b9 	bl	8000778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f969 	bl	80006dc <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800040a:	f000 f913 	bl	8000634 <MX_TIM14_Init>
  MX_TIM3_Init();
 800040e:	f000 f893 	bl	8000538 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000412:	4b21      	ldr	r3, [pc, #132]	@ (8000498 <main+0xa4>)
 8000414:	2100      	movs	r1, #0
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fc4e 	bl	8001cb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800041c:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <main+0xa8>)
 800041e:	2104      	movs	r1, #4
 8000420:	0018      	movs	r0, r3
 8000422:	f001 fc49 	bl	8001cb8 <HAL_TIM_PWM_Start>


int count = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
int dir = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(get_mode() == 2){
 800042e:	f000 fa25 	bl	800087c <get_mode>
 8000432:	0003      	movs	r3, r0
 8000434:	2b02      	cmp	r3, #2
 8000436:	d11c      	bne.n	8000472 <main+0x7e>
		  htim3.Instance->CCR2 = count;
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <main+0xa8>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(3);
 8000440:	2003      	movs	r0, #3
 8000442:	f000 fc71 	bl	8000d28 <HAL_Delay>
		  if(dir == 0){
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d103      	bne.n	8000454 <main+0x60>
		    count ++;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	e002      	b.n	800045a <main+0x66>

		  }else{
		    count--;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3b01      	subs	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
		  }

		  if(count == 120){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2b78      	cmp	r3, #120	@ 0x78
 800045e:	d102      	bne.n	8000466 <main+0x72>
		    dir = 1;
 8000460:	2301      	movs	r3, #1
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	e7e3      	b.n	800042e <main+0x3a>
		  } else if(count == 0){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1e0      	bne.n	800042e <main+0x3a>
		    dir = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	e7dd      	b.n	800042e <main+0x3a>
		  }
	  }
	  else if(get_mode() == 1){
 8000472:	f000 fa03 	bl	800087c <get_mode>
 8000476:	0003      	movs	r3, r0
 8000478:	2b01      	cmp	r3, #1
 800047a:	d104      	bne.n	8000486 <main+0x92>
		  htim3.Instance->CCR2 = 120;
 800047c:	4b07      	ldr	r3, [pc, #28]	@ (800049c <main+0xa8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2278      	movs	r2, #120	@ 0x78
 8000482:	639a      	str	r2, [r3, #56]	@ 0x38
 8000484:	e7d3      	b.n	800042e <main+0x3a>
	  } else if(get_mode() == 0){
 8000486:	f000 f9f9 	bl	800087c <get_mode>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d1cf      	bne.n	800042e <main+0x3a>
		  htim3.Instance->CCR2 = 0;
 800048e:	4b03      	ldr	r3, [pc, #12]	@ (800049c <main+0xa8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2200      	movs	r2, #0
 8000494:	639a      	str	r2, [r3, #56]	@ 0x38
	  if(get_mode() == 2){
 8000496:	e7ca      	b.n	800042e <main+0x3a>
 8000498:	20000074 	.word	0x20000074
 800049c:	20000028 	.word	0x20000028

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b08d      	sub	sp, #52	@ 0x34
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	2414      	movs	r4, #20
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0018      	movs	r0, r3
 80004ac:	231c      	movs	r3, #28
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f003 f949 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b6:	003b      	movs	r3, r7
 80004b8:	0018      	movs	r0, r3
 80004ba:	2314      	movs	r3, #20
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f003 f942 	bl	8003748 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <SystemClock_Config+0x94>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <SystemClock_Config+0x94>)
 80004ca:	2107      	movs	r1, #7
 80004cc:	438a      	bics	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2202      	movs	r2, #2
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	0052      	lsls	r2, r2, #1
 80004dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2280      	movs	r2, #128	@ 0x80
 80004e2:	0152      	lsls	r2, r2, #5
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2240      	movs	r2, #64	@ 0x40
 80004ea:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fee2 	bl	80012b8 <HAL_RCC_OscConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004f8:	f000 f99c 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fc:	003b      	movs	r3, r7
 80004fe:	2207      	movs	r2, #7
 8000500:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000502:	003b      	movs	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051a:	003b      	movs	r3, r7
 800051c:	2100      	movs	r1, #0
 800051e:	0018      	movs	r0, r3
 8000520:	f001 f8ae 	bl	8001680 <HAL_RCC_ClockConfig>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000528:	f000 f984 	bl	8000834 <Error_Handler>
  }
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b00d      	add	sp, #52	@ 0x34
 8000532:	bd90      	pop	{r4, r7, pc}
 8000534:	40022000 	.word	0x40022000

08000538 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08e      	sub	sp, #56	@ 0x38
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	2328      	movs	r3, #40	@ 0x28
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2310      	movs	r3, #16
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f003 f8fd 	bl	8003748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054e:	231c      	movs	r3, #28
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	0018      	movs	r0, r3
 8000554:	230c      	movs	r3, #12
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 f8f5 	bl	8003748 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055e:	003b      	movs	r3, r7
 8000560:	0018      	movs	r0, r3
 8000562:	231c      	movs	r3, #28
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f003 f8ee 	bl	8003748 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800056c:	4b2f      	ldr	r3, [pc, #188]	@ (800062c <MX_TIM3_Init+0xf4>)
 800056e:	4a30      	ldr	r2, [pc, #192]	@ (8000630 <MX_TIM3_Init+0xf8>)
 8000570:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000572:	4b2e      	ldr	r3, [pc, #184]	@ (800062c <MX_TIM3_Init+0xf4>)
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b2c      	ldr	r3, [pc, #176]	@ (800062c <MX_TIM3_Init+0xf4>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 119;
 800057e:	4b2b      	ldr	r3, [pc, #172]	@ (800062c <MX_TIM3_Init+0xf4>)
 8000580:	2277      	movs	r2, #119	@ 0x77
 8000582:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000584:	4b29      	ldr	r3, [pc, #164]	@ (800062c <MX_TIM3_Init+0xf4>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058a:	4b28      	ldr	r3, [pc, #160]	@ (800062c <MX_TIM3_Init+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000590:	4b26      	ldr	r3, [pc, #152]	@ (800062c <MX_TIM3_Init+0xf4>)
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fad8 	bl	8001b48 <HAL_TIM_Base_Init>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800059c:	f000 f94a 	bl	8000834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a0:	2128      	movs	r1, #40	@ 0x28
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	0152      	lsls	r2, r2, #5
 80005a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005aa:	187a      	adds	r2, r7, r1
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <MX_TIM3_Init+0xf4>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fe61 	bl	8002278 <HAL_TIM_ConfigClockSource>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80005ba:	f000 f93b 	bl	8000834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005be:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <MX_TIM3_Init+0xf4>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fb19 	bl	8001bf8 <HAL_TIM_PWM_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005ca:	f000 f933 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ce:	211c      	movs	r1, #28
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005dc:	187a      	adds	r2, r7, r1
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_TIM3_Init+0xf4>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f002 fb14 	bl	8002c10 <HAL_TIMEx_MasterConfigSynchronization>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80005ec:	f000 f922 	bl	8000834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f0:	003b      	movs	r3, r7
 80005f2:	2260      	movs	r2, #96	@ 0x60
 80005f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000608:	0039      	movs	r1, r7
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <MX_TIM3_Init+0xf4>)
 800060c:	2204      	movs	r2, #4
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fd32 	bl	8002078 <HAL_TIM_PWM_ConfigChannel>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000618:	f000 f90c 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800061c:	4b03      	ldr	r3, [pc, #12]	@ (800062c <MX_TIM3_Init+0xf4>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 f99e 	bl	8000960 <HAL_TIM_MspPostInit>

}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b00e      	add	sp, #56	@ 0x38
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000028 	.word	0x20000028
 8000630:	40000400 	.word	0x40000400

08000634 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	231c      	movs	r3, #28
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f003 f880 	bl	8003748 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <MX_TIM14_Init+0x98>)
 800064a:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <MX_TIM14_Init+0x9c>)
 800064c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 11999;
 800064e:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_TIM14_Init+0x98>)
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <MX_TIM14_Init+0xa0>)
 8000652:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <MX_TIM14_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1999;
 800065a:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <MX_TIM14_Init+0x98>)
 800065c:	4a1e      	ldr	r2, [pc, #120]	@ (80006d8 <MX_TIM14_Init+0xa4>)
 800065e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_TIM14_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_TIM14_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_TIM14_Init+0x98>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fa6a 	bl	8001b48 <HAL_TIM_Base_Init>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000678:	f000 f8dc 	bl	8000834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_TIM14_Init+0x98>)
 800067e:	0018      	movs	r0, r3
 8000680:	f001 faba 	bl	8001bf8 <HAL_TIM_PWM_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000688:	f000 f8d4 	bl	8000834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2260      	movs	r2, #96	@ 0x60
 8000690:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	22fa      	movs	r2, #250	@ 0xfa
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a6:	1d39      	adds	r1, r7, #4
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_TIM14_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fce3 	bl	8002078 <HAL_TIM_PWM_ConfigChannel>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80006b6:	f000 f8bd 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <MX_TIM14_Init+0x98>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 f94f 	bl	8000960 <HAL_TIM_MspPostInit>

}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b008      	add	sp, #32
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	20000074 	.word	0x20000074
 80006d0:	40002000 	.word	0x40002000
 80006d4:	00002edf 	.word	0x00002edf
 80006d8:	000007cf 	.word	0x000007cf

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 80006e2:	4a24      	ldr	r2, [pc, #144]	@ (8000774 <MX_USART1_UART_Init+0x98>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 80006e8:	22e1      	movs	r2, #225	@ 0xe1
 80006ea:	0252      	lsls	r2, r2, #9
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 8000726:	0018      	movs	r0, r3
 8000728:	f002 faec 	bl	8002d04 <HAL_UART_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f880 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f002 ff25 	bl	8003588 <HAL_UARTEx_SetTxFifoThreshold>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000742:	f000 f877 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f002 ff5c 	bl	8003608 <HAL_UARTEx_SetRxFifoThreshold>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 f86e 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 800075a:	0018      	movs	r0, r3
 800075c:	f002 feda 	bl	8003514 <HAL_UARTEx_DisableFifoMode>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 f866 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	200000c0 	.word	0x200000c0
 8000774:	40013800 	.word	0x40013800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	@ 0x24
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	240c      	movs	r4, #12
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 ffdd 	bl	8003748 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_GPIO_Init+0xb4>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_GPIO_Init+0xb4>)
 8000794:	2104      	movs	r1, #4
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_GPIO_Init+0xb4>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800079e:	2204      	movs	r2, #4
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b21      	ldr	r3, [pc, #132]	@ (800082c <MX_GPIO_Init+0xb4>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_GPIO_Init+0xb4>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_GPIO_Init+0xb4>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOSFET_GPIO_Port, MOSFET_Pin, GPIO_PIN_RESET);
 80007be:	23a0      	movs	r3, #160	@ 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fd1a 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOSFET_Pin */
  GPIO_InitStruct.Pin = MOSFET_Pin;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2220      	movs	r2, #32
 80007d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOSFET_GPIO_Port, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	23a0      	movs	r3, #160	@ 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fb9d 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2240      	movs	r2, #64	@ 0x40
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000830 <MX_GPIO_Init+0xb8>)
 80007fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000804:	193a      	adds	r2, r7, r4
 8000806:	23a0      	movs	r3, #160	@ 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fb8d 	bl	8000f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2007      	movs	r0, #7
 8000818:	f000 fb56 	bl	8000ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800081c:	2007      	movs	r0, #7
 800081e:	f000 fb68 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b009      	add	sp, #36	@ 0x24
 8000828:	bd90      	pop	{r4, r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	40021000 	.word	0x40021000
 8000830:	10210000 	.word	0x10210000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <set_mode>:

uint8_t _mode = 0;
uint32_t _last_press = 0;


void set_mode(uint8_t mode, uint32_t time){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	701a      	strb	r2, [r3, #0]
	if(time - _last_press > 400){
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <set_mode+0x34>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	23c8      	movs	r3, #200	@ 0xc8
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	429a      	cmp	r2, r3
 800085c:	d906      	bls.n	800086c <set_mode+0x2c>
		_mode = mode;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <set_mode+0x38>)
 8000860:	1dfa      	adds	r2, r7, #7
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	701a      	strb	r2, [r3, #0]
		_last_press = time;
 8000866:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <set_mode+0x34>)
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	601a      	str	r2, [r3, #0]
	}
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000158 	.word	0x20000158
 8000878:	20000154 	.word	0x20000154

0800087c <get_mode>:
uint8_t get_mode(){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	return _mode;
 8000880:	4b02      	ldr	r3, [pc, #8]	@ (800088c <get_mode+0x10>)
 8000882:	781b      	ldrb	r3, [r3, #0]
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000154 	.word	0x20000154

08000890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x44>)
 8000898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_MspInit+0x44>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	0549      	lsls	r1, r1, #21
 80008b8:	430a      	orrs	r2, r1
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <HAL_MspInit+0x44>)
 80008be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	055b      	lsls	r3, r3, #21
 80008c4:	4013      	ands	r3, r2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000954 <HAL_TIM_Base_MspInit+0x7c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d114      	bne.n	8000914 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <HAL_TIM_Base_MspInit+0x80>)
 80008ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <HAL_TIM_Base_MspInit+0x80>)
 80008f0:	2102      	movs	r1, #2
 80008f2:	430a      	orrs	r2, r1
 80008f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <HAL_TIM_Base_MspInit+0x80>)
 80008f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008fa:	2202      	movs	r2, #2
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2010      	movs	r0, #16
 8000908:	f000 fade 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800090c:	2010      	movs	r0, #16
 800090e:	f000 faf0 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000912:	e01a      	b.n	800094a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a10      	ldr	r2, [pc, #64]	@ (800095c <HAL_TIM_Base_MspInit+0x84>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d115      	bne.n	800094a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_TIM_Base_MspInit+0x80>)
 8000920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <HAL_TIM_Base_MspInit+0x80>)
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	0209      	lsls	r1, r1, #8
 8000928:	430a      	orrs	r2, r1
 800092a:	641a      	str	r2, [r3, #64]	@ 0x40
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <HAL_TIM_Base_MspInit+0x80>)
 800092e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2013      	movs	r0, #19
 8000940:	f000 fac2 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000944:	2013      	movs	r0, #19
 8000946:	f000 fad4 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	40000400 	.word	0x40000400
 8000958:	40021000 	.word	0x40021000
 800095c:	40002000 	.word	0x40002000

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	@ 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	2414      	movs	r4, #20
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	2314      	movs	r3, #20
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f002 fee8 	bl	8003748 <memset>
  if(htim->Instance==TIM3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a29      	ldr	r2, [pc, #164]	@ (8000a24 <HAL_TIM_MspPostInit+0xc4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d123      	bne.n	80009ca <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <HAL_TIM_MspPostInit+0xc8>)
 8000984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000986:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <HAL_TIM_MspPostInit+0xc8>)
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	635a      	str	r2, [r3, #52]	@ 0x34
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <HAL_TIM_MspPostInit+0xc8>)
 8000990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000992:	2201      	movs	r2, #1
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = VSET_Pin;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2202      	movs	r2, #2
 80009a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2203      	movs	r2, #3
 80009b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VSET_GPIO_Port, &GPIO_InitStruct);
 80009ba:	187a      	adds	r2, r7, r1
 80009bc:	23a0      	movs	r3, #160	@ 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fab2 	bl	8000f2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80009c8:	e027      	b.n	8000a1a <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM14)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_TIM_MspPostInit+0xcc>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d122      	bne.n	8000a1a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_TIM_MspPostInit+0xc8>)
 80009d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <HAL_TIM_MspPostInit+0xc8>)
 80009da:	2101      	movs	r1, #1
 80009dc:	430a      	orrs	r2, r1
 80009de:	635a      	str	r2, [r3, #52]	@ 0x34
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <HAL_TIM_MspPostInit+0xc8>)
 80009e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e4:	2201      	movs	r2, #1
 80009e6:	4013      	ands	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ec:	2114      	movs	r1, #20
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2210      	movs	r2, #16
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2204      	movs	r2, #4
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	187a      	adds	r2, r7, r1
 8000a0e:	23a0      	movs	r3, #160	@ 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fa89 	bl	8000f2c <HAL_GPIO_Init>
}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b00b      	add	sp, #44	@ 0x2c
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	40000400 	.word	0x40000400
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40002000 	.word	0x40002000

08000a30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b091      	sub	sp, #68	@ 0x44
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	232c      	movs	r3, #44	@ 0x2c
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f002 fe80 	bl	8003748 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	2410      	movs	r4, #16
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	231c      	movs	r3, #28
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f002 fe78 	bl	8003748 <memset>
  if(huart->Instance==USART1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d13e      	bne.n	8000ae0 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 ff7d 	bl	8001970 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a7a:	f7ff fedb 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_UART_MspInit+0xbc>)
 8000a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <HAL_UART_MspInit+0xbc>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	01c9      	lsls	r1, r1, #7
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <HAL_UART_MspInit+0xbc>)
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	01db      	lsls	r3, r3, #7
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <HAL_UART_MspInit+0xbc>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <HAL_UART_MspInit+0xbc>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <HAL_UART_MspInit+0xbc>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab2:	212c      	movs	r1, #44	@ 0x2c
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2204      	movs	r2, #4
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	23a0      	movs	r3, #160	@ 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fa26 	bl	8000f2c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b011      	add	sp, #68	@ 0x44
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40021000 	.word	0x40021000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f8ea 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if(get_mode() == 0){
 8000b28:	f7ff fea8 	bl	800087c <get_mode>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d10b      	bne.n	8000b48 <EXTI4_15_IRQHandler+0x24>
	  	set_mode(1, HAL_GetTick());
 8000b30:	f000 f8f0 	bl	8000d14 <HAL_GetTick>
 8000b34:	0003      	movs	r3, r0
 8000b36:	0019      	movs	r1, r3
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fe81 	bl	8000840 <set_mode>
	  	htim3.Instance->CCR2 = 120;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <EXTI4_15_IRQHandler+0x6c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2278      	movs	r2, #120	@ 0x78
 8000b44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b46:	e01c      	b.n	8000b82 <EXTI4_15_IRQHandler+0x5e>
	  } else if(get_mode() == 1){
 8000b48:	f7ff fe98 	bl	800087c <get_mode>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d107      	bne.n	8000b62 <EXTI4_15_IRQHandler+0x3e>
	  	set_mode(2, HAL_GetTick());
 8000b52:	f000 f8df 	bl	8000d14 <HAL_GetTick>
 8000b56:	0003      	movs	r3, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f7ff fe70 	bl	8000840 <set_mode>
 8000b60:	e00f      	b.n	8000b82 <EXTI4_15_IRQHandler+0x5e>
	  } else if(get_mode() == 2){
 8000b62:	f7ff fe8b 	bl	800087c <get_mode>
 8000b66:	0003      	movs	r3, r0
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d10a      	bne.n	8000b82 <EXTI4_15_IRQHandler+0x5e>
	  	set_mode(0, HAL_GetTick());
 8000b6c:	f000 f8d2 	bl	8000d14 <HAL_GetTick>
 8000b70:	0003      	movs	r3, r0
 8000b72:	0019      	movs	r1, r3
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fe63 	bl	8000840 <set_mode>
	  	htim3.Instance->CCR2 = 0;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <EXTI4_15_IRQHandler+0x6c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	639a      	str	r2, [r3, #56]	@ 0x38
	  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_INT_Pin);
 8000b82:	2040      	movs	r0, #64	@ 0x40
 8000b84:	f000 fb5a 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */


  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	20000028 	.word	0x20000028

08000b94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <TIM3_IRQHandler+0x14>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 f964 	bl	8001e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	20000028 	.word	0x20000028

08000bac <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <TIM14_IRQHandler+0x14>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 f958 	bl	8001e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000074 	.word	0x20000074

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <SystemInit+0x14>)
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	0512      	lsls	r2, r2, #20
 8000bce:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f7ff fff0 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000be4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000be6:	e003      	b.n	8000bf0 <LoopCopyDataInit>

08000be8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000bea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bee:	3104      	adds	r1, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bf0:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <LoopForever+0xa>)
  ldr r3, =_edata
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <LoopForever+0xe>)
  adds r2, r0, r1
 8000bf4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bf6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bf8:	d3f6      	bcc.n	8000be8 <CopyDataInit>
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopForever+0x12>)
  b LoopFillZerobss
 8000bfc:	e002      	b.n	8000c04 <LoopFillZerobss>

08000bfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c00:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c02:	3204      	adds	r2, #4

08000c04 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <LoopForever+0x16>)
  cmp r2, r3
 8000c06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c08:	d3f9      	bcc.n	8000bfe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f002 fda5 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff fbf1 	bl	80003f4 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000c18:	0800389c 	.word	0x0800389c
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c24:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c28:	20000160 	.word	0x20000160

08000c2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_IRQHandler>

08000c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 f80e 	bl	8000c5c <HAL_InitTick>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4c:	f7ff fe20 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <HAL_InitTick+0x88>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d02b      	beq.n	8000ccc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_InitTick+0x8c>)
 8000c76:	681c      	ldr	r4, [r3, #0]
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <HAL_InitTick+0x88>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	23fa      	movs	r3, #250	@ 0xfa
 8000c80:	0098      	lsls	r0, r3, #2
 8000c82:	f7ff fa41 	bl	8000108 <__udivsi3>
 8000c86:	0003      	movs	r3, r0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	f7ff fa3c 	bl	8000108 <__udivsi3>
 8000c90:	0003      	movs	r3, r0
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 f93d 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d112      	bne.n	8000cc2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d80a      	bhi.n	8000cb8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 f90c 	bl	8000ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_InitTick+0x90>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e00d      	b.n	8000cd4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	e008      	b.n	8000cd4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e003      	b.n	8000cd4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b005      	add	sp, #20
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_IncTick+0x1c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	18d2      	adds	r2, r2, r3
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_IncTick+0x20>)
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	2000015c 	.word	0x2000015c

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b02      	ldr	r3, [pc, #8]	@ (8000d24 <HAL_GetTick+0x10>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	2000015c 	.word	0x2000015c

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff fff0 	bl	8000d14 <HAL_GetTick>
 8000d34:	0003      	movs	r3, r0
 8000d36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	001a      	movs	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	189b      	adds	r3, r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	f7ff ffe0 	bl	8000d14 <HAL_GetTick>
 8000d54:	0002      	movs	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b004      	add	sp, #16
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	0002      	movs	r2, r0
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d82:	d809      	bhi.n	8000d98 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	231f      	movs	r3, #31
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_EnableIRQ+0x30>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	4091      	lsls	r1, r2
 8000d94:	000a      	movs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	0002      	movs	r2, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000db8:	d828      	bhi.n	8000e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dba:	4a2f      	ldr	r2, [pc, #188]	@ (8000e78 <__NVIC_SetPriority+0xd4>)
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	33c0      	adds	r3, #192	@ 0xc0
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	589b      	ldr	r3, [r3, r2]
 8000dca:	1dfa      	adds	r2, r7, #7
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	0011      	movs	r1, r2
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	00d2      	lsls	r2, r2, #3
 8000dd6:	21ff      	movs	r1, #255	@ 0xff
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	22ff      	movs	r2, #255	@ 0xff
 8000de8:	401a      	ands	r2, r3
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0018      	movs	r0, r3
 8000df0:	2303      	movs	r3, #3
 8000df2:	4003      	ands	r3, r0
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df8:	481f      	ldr	r0, [pc, #124]	@ (8000e78 <__NVIC_SetPriority+0xd4>)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	430a      	orrs	r2, r1
 8000e04:	33c0      	adds	r3, #192	@ 0xc0
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e0a:	e031      	b.n	8000e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <__NVIC_SetPriority+0xd8>)
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0019      	movs	r1, r3
 8000e14:	230f      	movs	r3, #15
 8000e16:	400b      	ands	r3, r1
 8000e18:	3b08      	subs	r3, #8
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3306      	adds	r3, #6
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	3304      	adds	r3, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1dfa      	adds	r2, r7, #7
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	400a      	ands	r2, r1
 8000e30:	00d2      	lsls	r2, r2, #3
 8000e32:	21ff      	movs	r1, #255	@ 0xff
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	43d2      	mvns	r2, r2
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	22ff      	movs	r2, #255	@ 0xff
 8000e44:	401a      	ands	r2, r3
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	4003      	ands	r3, r0
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e54:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <__NVIC_SetPriority+0xd8>)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	001c      	movs	r4, r3
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	4023      	ands	r3, r4
 8000e60:	3b08      	subs	r3, #8
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	430a      	orrs	r2, r1
 8000e66:	3306      	adds	r3, #6
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	18c3      	adds	r3, r0, r3
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b003      	add	sp, #12
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	1e5a      	subs	r2, r3, #1
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	045b      	lsls	r3, r3, #17
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d301      	bcc.n	8000e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e94:	2301      	movs	r3, #1
 8000e96:	e010      	b.n	8000eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <SysTick_Config+0x44>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	2103      	movs	r1, #3
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ff7c 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <SysTick_Config+0x44>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <SysTick_Config+0x44>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	1c02      	adds	r2, r0, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	0002      	movs	r2, r0
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff33 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ffaf 	bl	8000e80 <SysTick_Config>
 8000f22:	0003      	movs	r3, r0
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f3a:	e14d      	b.n	80011d8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4091      	lsls	r1, r2
 8000f46:	000a      	movs	r2, r1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x28>
 8000f52:	e13e      	b.n	80011d2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x38>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b12      	cmp	r3, #18
 8000f62:	d125      	bne.n	8000fb0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	58d3      	ldr	r3, [r2, r3]
 8000f70:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	2207      	movs	r2, #7
 8000f76:	4013      	ands	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	401a      	ands	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2107      	movs	r1, #7
 8000f94:	400b      	ands	r3, r1
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	6979      	ldr	r1, [r7, #20]
 8000fae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d00b      	beq.n	8001004 <HAL_GPIO_Init+0xd8>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff8:	2b11      	cmp	r3, #17
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b12      	cmp	r3, #18
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	43da      	mvns	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	4313      	orrs	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4013      	ands	r3, r2
 8001048:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	2201      	movs	r2, #1
 8001052:	401a      	ands	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4313      	orrs	r3, r2
 800105e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	4013      	ands	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	055b      	lsls	r3, r3, #21
 80010a6:	4013      	ands	r3, r2
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x180>
 80010aa:	e092      	b.n	80011d2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80010ac:	4a50      	ldr	r2, [pc, #320]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3318      	adds	r3, #24
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	589b      	ldr	r3, [r3, r2]
 80010b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	220f      	movs	r2, #15
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	4013      	ands	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	23a0      	movs	r3, #160	@ 0xa0
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1d6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a45      	ldr	r2, [pc, #276]	@ (80011f4 <HAL_GPIO_Init+0x2c8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1d2>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a44      	ldr	r2, [pc, #272]	@ (80011f8 <HAL_GPIO_Init+0x2cc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1ce>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a43      	ldr	r2, [pc, #268]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1ca>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x1d8>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x1d8>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x1d8>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x1d8>
 8001102:	2300      	movs	r3, #0
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	2103      	movs	r1, #3
 8001108:	400a      	ands	r2, r1
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	4093      	lsls	r3, r2
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001114:	4936      	ldr	r1, [pc, #216]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3318      	adds	r3, #24
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001122:	4a33      	ldr	r2, [pc, #204]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	58d3      	ldr	r3, [r2, r3]
 8001128:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43da      	mvns	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	025b      	lsls	r3, r3, #9
 800113c:	4013      	ands	r3, r2
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001148:	4929      	ldr	r1, [pc, #164]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 800114a:	2280      	movs	r2, #128	@ 0x80
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001150:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 8001152:	2384      	movs	r3, #132	@ 0x84
 8001154:	58d3      	ldr	r3, [r2, r3]
 8001156:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43da      	mvns	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	4013      	ands	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	029b      	lsls	r3, r3, #10
 800116a:	4013      	ands	r3, r2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001176:	491e      	ldr	r1, [pc, #120]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 8001178:	2284      	movs	r2, #132	@ 0x84
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43da      	mvns	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4013      	ands	r3, r2
 800118c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	2380      	movs	r3, #128	@ 0x80
 8001194:	035b      	lsls	r3, r3, #13
 8001196:	4013      	ands	r3, r2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43da      	mvns	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	4013      	ands	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	039b      	lsls	r3, r3, #14
 80011c0:	4013      	ands	r3, r2
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	40da      	lsrs	r2, r3
 80011e0:	1e13      	subs	r3, r2, #0
 80011e2:	d000      	beq.n	80011e6 <HAL_GPIO_Init+0x2ba>
 80011e4:	e6aa      	b.n	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b006      	add	sp, #24
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021800 	.word	0x40021800
 80011f4:	50000400 	.word	0x50000400
 80011f8:	50000800 	.word	0x50000800
 80011fc:	50001400 	.word	0x50001400

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	0008      	movs	r0, r1
 800120a:	0011      	movs	r1, r2
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	1c7b      	adds	r3, r7, #1
 8001214:	1c0a      	adds	r2, r1, #0
 8001216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	1c7b      	adds	r3, r7, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	0002      	movs	r2, r0
 8001244:	1dbb      	adds	r3, r7, #6
 8001246:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	1dba      	adds	r2, r7, #6
 800124e:	8812      	ldrh	r2, [r2, #0]
 8001250:	4013      	ands	r3, r2
 8001252:	d008      	beq.n	8001266 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001256:	1dba      	adds	r2, r7, #6
 8001258:	8812      	ldrh	r2, [r2, #0]
 800125a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	0018      	movs	r0, r3
 8001262:	f000 f815 	bl	8001290 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	1dba      	adds	r2, r7, #6
 800126c:	8812      	ldrh	r2, [r2, #0]
 800126e:	4013      	ands	r3, r2
 8001270:	d008      	beq.n	8001284 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001274:	1dba      	adds	r2, r7, #6
 8001276:	8812      	ldrh	r2, [r2, #0]
 8001278:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800127a:	1dbb      	adds	r3, r7, #6
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	f000 f810 	bl	80012a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021800 	.word	0x40021800

08001290 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	0002      	movs	r2, r0
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800129c:	46c0      	nop			@ (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	0002      	movs	r2, r0
 80012ac:	1dbb      	adds	r3, r7, #6
 80012ae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e1d0      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	d100      	bne.n	80012d6 <HAL_RCC_OscConfig+0x1e>
 80012d4:	e069      	b.n	80013aa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d6:	4bc8      	ldr	r3, [pc, #800]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2238      	movs	r2, #56	@ 0x38
 80012dc:	4013      	ands	r3, r2
 80012de:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d15d      	bne.n	80013aa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1bc      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d107      	bne.n	800130e <HAL_RCC_OscConfig+0x56>
 80012fe:	4bbe      	ldr	r3, [pc, #760]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4bbd      	ldr	r3, [pc, #756]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001304:	2180      	movs	r1, #128	@ 0x80
 8001306:	0249      	lsls	r1, r1, #9
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e020      	b.n	8001350 <HAL_RCC_OscConfig+0x98>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	23a0      	movs	r3, #160	@ 0xa0
 8001314:	02db      	lsls	r3, r3, #11
 8001316:	429a      	cmp	r2, r3
 8001318:	d10e      	bne.n	8001338 <HAL_RCC_OscConfig+0x80>
 800131a:	4bb7      	ldr	r3, [pc, #732]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4bb6      	ldr	r3, [pc, #728]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001320:	2180      	movs	r1, #128	@ 0x80
 8001322:	02c9      	lsls	r1, r1, #11
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	4bb3      	ldr	r3, [pc, #716]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4bb2      	ldr	r3, [pc, #712]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800132e:	2180      	movs	r1, #128	@ 0x80
 8001330:	0249      	lsls	r1, r1, #9
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001338:	4baf      	ldr	r3, [pc, #700]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4bae      	ldr	r3, [pc, #696]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800133e:	49af      	ldr	r1, [pc, #700]	@ (80015fc <HAL_RCC_OscConfig+0x344>)
 8001340:	400a      	ands	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	4bac      	ldr	r3, [pc, #688]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4bab      	ldr	r3, [pc, #684]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800134a:	49ad      	ldr	r1, [pc, #692]	@ (8001600 <HAL_RCC_OscConfig+0x348>)
 800134c:	400a      	ands	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d014      	beq.n	8001382 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fcdc 	bl	8000d14 <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001362:	f7ff fcd7 	bl	8000d14 <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b64      	cmp	r3, #100	@ 0x64
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e17b      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001374:	4ba0      	ldr	r3, [pc, #640]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0xaa>
 8001380:	e013      	b.n	80013aa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff fcc7 	bl	8000d14 <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcc2 	bl	8000d14 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e166      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800139e:	4b96      	ldr	r3, [pc, #600]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	029b      	lsls	r3, r3, #10
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0xfe>
 80013b4:	e086      	b.n	80014c4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b6:	4b90      	ldr	r3, [pc, #576]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2238      	movs	r2, #56	@ 0x38
 80013bc:	4013      	ands	r3, r2
 80013be:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d12f      	bne.n	8001426 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e14c      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b89      	ldr	r3, [pc, #548]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a8b      	ldr	r2, [pc, #556]	@ (8001604 <HAL_RCC_OscConfig+0x34c>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	021a      	lsls	r2, r3, #8
 80013e2:	4b85      	ldr	r3, [pc, #532]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d112      	bne.n	8001414 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ee:	4b82      	ldr	r3, [pc, #520]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a85      	ldr	r2, [pc, #532]	@ (8001608 <HAL_RCC_OscConfig+0x350>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	4b7e      	ldr	r3, [pc, #504]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001402:	4b7d      	ldr	r3, [pc, #500]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0adb      	lsrs	r3, r3, #11
 8001408:	2207      	movs	r2, #7
 800140a:	4013      	ands	r3, r2
 800140c:	4a7f      	ldr	r2, [pc, #508]	@ (800160c <HAL_RCC_OscConfig+0x354>)
 800140e:	40da      	lsrs	r2, r3
 8001410:	4b7f      	ldr	r3, [pc, #508]	@ (8001610 <HAL_RCC_OscConfig+0x358>)
 8001412:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001414:	4b7f      	ldr	r3, [pc, #508]	@ (8001614 <HAL_RCC_OscConfig+0x35c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fc1f 	bl	8000c5c <HAL_InitTick>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d050      	beq.n	80014c4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e122      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800142e:	4b72      	ldr	r3, [pc, #456]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a75      	ldr	r2, [pc, #468]	@ (8001608 <HAL_RCC_OscConfig+0x350>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	4b6e      	ldr	r3, [pc, #440]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001442:	4b6d      	ldr	r3, [pc, #436]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b6c      	ldr	r3, [pc, #432]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	0049      	lsls	r1, r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc60 	bl	8000d14 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc5b 	bl	8000d14 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0ff      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146c:	4b62      	ldr	r3, [pc, #392]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4013      	ands	r3, r2
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b5f      	ldr	r3, [pc, #380]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a61      	ldr	r2, [pc, #388]	@ (8001604 <HAL_RCC_OscConfig+0x34c>)
 800147e:	4013      	ands	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	021a      	lsls	r2, r3, #8
 8001488:	4b5b      	ldr	r3, [pc, #364]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	e019      	b.n	80014c4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001490:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001496:	4960      	ldr	r1, [pc, #384]	@ (8001618 <HAL_RCC_OscConfig+0x360>)
 8001498:	400a      	ands	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc3a 	bl	8000d14 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc35 	bl	8000d14 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0d9      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b8:	4b4f      	ldr	r3, [pc, #316]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4013      	ands	r3, r2
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2208      	movs	r2, #8
 80014ca:	4013      	ands	r3, r2
 80014cc:	d042      	beq.n	8001554 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014ce:	4b4a      	ldr	r3, [pc, #296]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2238      	movs	r2, #56	@ 0x38
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b18      	cmp	r3, #24
 80014d8:	d105      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d138      	bne.n	8001554 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0c2      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d019      	beq.n	8001522 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014ee:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80014f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc0b 	bl	8000d14 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001504:	f7ff fc06 	bl	8000d14 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e0aa      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001516:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	2202      	movs	r2, #2
 800151c:	4013      	ands	r3, r2
 800151e:	d0f1      	beq.n	8001504 <HAL_RCC_OscConfig+0x24c>
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001522:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001524:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001526:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001528:	2101      	movs	r1, #1
 800152a:	438a      	bics	r2, r1
 800152c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fbf1 	bl	8000d14 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001538:	f7ff fbec 	bl	8000d14 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e090      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800154a:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d1f1      	bne.n	8001538 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2204      	movs	r2, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d100      	bne.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800155e:	e084      	b.n	800166a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2238      	movs	r2, #56	@ 0x38
 800156e:	4013      	ands	r3, r2
 8001570:	2b20      	cmp	r3, #32
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d000      	beq.n	800157e <HAL_RCC_OscConfig+0x2c6>
 800157c:	e075      	b.n	800166a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e074      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d106      	bne.n	8001598 <HAL_RCC_OscConfig+0x2e0>
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 800158c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 8001590:	2101      	movs	r1, #1
 8001592:	430a      	orrs	r2, r1
 8001594:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001596:	e01c      	b.n	80015d2 <HAL_RCC_OscConfig+0x31a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d10c      	bne.n	80015ba <HAL_RCC_OscConfig+0x302>
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015a6:	2104      	movs	r1, #4
 80015a8:	430a      	orrs	r2, r1
 80015aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015b8:	e00b      	b.n	80015d2 <HAL_RCC_OscConfig+0x31a>
 80015ba:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	438a      	bics	r2, r1
 80015c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_RCC_OscConfig+0x340>)
 80015cc:	2104      	movs	r1, #4
 80015ce:	438a      	bics	r2, r1
 80015d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d028      	beq.n	800162c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fb9b 	bl	8000d14 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb96 	bl	8000d14 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_RCC_OscConfig+0x364>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d915      	bls.n	8001620 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e039      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	fffeffff 	.word	0xfffeffff
 8001600:	fffbffff 	.word	0xfffbffff
 8001604:	ffff80ff 	.word	0xffff80ff
 8001608:	ffffc7ff 	.word	0xffffc7ff
 800160c:	02dc6c00 	.word	0x02dc6c00
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004
 8001618:	fffffeff 	.word	0xfffffeff
 800161c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <HAL_RCC_OscConfig+0x3bc>)
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d0dc      	beq.n	80015e4 <HAL_RCC_OscConfig+0x32c>
 800162a:	e013      	b.n	8001654 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fb72 	bl	8000d14 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001634:	e009      	b.n	800164a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff fb6d 	bl	8000d14 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <HAL_RCC_OscConfig+0x3c0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e010      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_RCC_OscConfig+0x3bc>)
 800164c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001654:	230f      	movs	r3, #15
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d105      	bne.n	800166a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_RCC_OscConfig+0x3bc>)
 8001660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <HAL_RCC_OscConfig+0x3bc>)
 8001664:	4905      	ldr	r1, [pc, #20]	@ (800167c <HAL_RCC_OscConfig+0x3c4>)
 8001666:	400a      	ands	r2, r1
 8001668:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b006      	add	sp, #24
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	00001388 	.word	0x00001388
 800167c:	efffffff 	.word	0xefffffff

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0df      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b71      	ldr	r3, [pc, #452]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2207      	movs	r2, #7
 800169a:	4013      	ands	r3, r2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d91e      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b6e      	ldr	r3, [pc, #440]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2207      	movs	r2, #7
 80016a8:	4393      	bics	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	4b6b      	ldr	r3, [pc, #428]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016b4:	f7ff fb2e 	bl	8000d14 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016be:	f7ff fb29 	bl	8000d14 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	4a65      	ldr	r2, [pc, #404]	@ (8001860 <HAL_RCC_ClockConfig+0x1e0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0c0      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016d2:	4b62      	ldr	r3, [pc, #392]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2207      	movs	r2, #7
 80016d8:	4013      	ands	r3, r2
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1ee      	bne.n	80016be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d017      	beq.n	800171a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a5b      	ldr	r2, [pc, #364]	@ (8001868 <HAL_RCC_ClockConfig+0x1e8>)
 80016fa:	401a      	ands	r2, r3
 80016fc:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 80016fe:	21b0      	movs	r1, #176	@ 0xb0
 8001700:	0109      	lsls	r1, r1, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001706:	4b57      	ldr	r3, [pc, #348]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4a58      	ldr	r2, [pc, #352]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 800170c:	4013      	ands	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4b53      	ldr	r3, [pc, #332]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	4013      	ands	r3, r2
 8001722:	d04b      	beq.n	80017bc <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172c:	4b4d      	ldr	r3, [pc, #308]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	029b      	lsls	r3, r3, #10
 8001734:	4013      	ands	r3, r2
 8001736:	d11f      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e08b      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d107      	bne.n	8001754 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4013      	ands	r3, r2
 800174e:	d113      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e07f      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d106      	bne.n	800176a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800175c:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 800175e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d108      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e074      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800176a:	4b3e      	ldr	r3, [pc, #248]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 800176c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e06d      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001778:	4b3a      	ldr	r3, [pc, #232]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2207      	movs	r2, #7
 800177e:	4393      	bics	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800178c:	f7ff fac2 	bl	8000d14 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001794:	e009      	b.n	80017aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7ff fabd 	bl	8000d14 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001860 <HAL_RCC_ClockConfig+0x1e0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e054      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2238      	movs	r2, #56	@ 0x38
 80017b0:	401a      	ands	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1ec      	bne.n	8001796 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b27      	ldr	r3, [pc, #156]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2207      	movs	r2, #7
 80017c2:	4013      	ands	r3, r2
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d21e      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b24      	ldr	r3, [pc, #144]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2207      	movs	r2, #7
 80017d0:	4393      	bics	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fa9a 	bl	8000d14 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017e4:	e009      	b.n	80017fa <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017e6:	f7ff fa95 	bl	8000d14 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <HAL_RCC_ClockConfig+0x1e0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e02c      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_RCC_ClockConfig+0x1dc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2207      	movs	r2, #7
 8001800:	4013      	ands	r3, r2
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d1ee      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2204      	movs	r2, #4
 800180e:	4013      	ands	r3, r2
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001826:	f000 f82b 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800182a:	0001      	movs	r1, r0
 800182c:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_RCC_ClockConfig+0x1e4>)
 800182e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	220f      	movs	r2, #15
 8001834:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_RCC_ClockConfig+0x1f4>)
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800183c:	221f      	movs	r2, #31
 800183e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001840:	000a      	movs	r2, r1
 8001842:	40da      	lsrs	r2, r3
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_RCC_ClockConfig+0x1f8>)
 8001846:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_RCC_ClockConfig+0x1fc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff fa05 	bl	8000c5c <HAL_InitTick>
 8001852:	0003      	movs	r3, r0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40022000 	.word	0x40022000
 8001860:	00001388 	.word	0x00001388
 8001864:	40021000 	.word	0x40021000
 8001868:	ffff84ff 	.word	0xffff84ff
 800186c:	fffff0ff 	.word	0xfffff0ff
 8001870:	ffff8fff 	.word	0xffff8fff
 8001874:	080037b8 	.word	0x080037b8
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2238      	movs	r2, #56	@ 0x38
 800188c:	4013      	ands	r3, r2
 800188e:	d10f      	bne.n	80018b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0adb      	lsrs	r3, r3, #11
 8001896:	2207      	movs	r2, #7
 8001898:	4013      	ands	r3, r2
 800189a:	2201      	movs	r2, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	4815      	ldr	r0, [pc, #84]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x7c>)
 80018a6:	f7fe fc2f 	bl	8000108 <__udivsi3>
 80018aa:	0003      	movs	r3, r0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	e01e      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2238      	movs	r2, #56	@ 0x38
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d102      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x80>)
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2238      	movs	r2, #56	@ 0x38
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d103      	bne.n	80018d6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2238      	movs	r2, #56	@ 0x38
 80018dc:	4013      	ands	r3, r2
 80018de:	2b18      	cmp	r3, #24
 80018e0:	d103      	bne.n	80018ea <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80018e2:	23fa      	movs	r3, #250	@ 0xfa
 80018e4:	01db      	lsls	r3, r3, #7
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	e001      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	02dc6c00 	.word	0x02dc6c00
 8001900:	007a1200 	.word	0x007a1200

08001904 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001908:	f7ff ffba 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800190c:	0001      	movs	r1, r0
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_GetHCLKFreq+0x30>)
 8001910:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	220f      	movs	r2, #15
 8001916:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <HAL_RCC_GetHCLKFreq+0x34>)
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800191e:	221f      	movs	r2, #31
 8001920:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001922:	000a      	movs	r2, r1
 8001924:	40da      	lsrs	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_RCC_GetHCLKFreq+0x38>)
 8001928:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <HAL_RCC_GetHCLKFreq+0x38>)
 800192c:	681b      	ldr	r3, [r3, #0]
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	080037b8 	.word	0x080037b8
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001944:	f7ff ffde 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001948:	0001      	movs	r1, r0
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <HAL_RCC_GetPCLK1Freq+0x28>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0b1b      	lsrs	r3, r3, #12
 8001950:	2207      	movs	r2, #7
 8001952:	401a      	ands	r2, r3
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	58d3      	ldr	r3, [r2, r3]
 800195a:	221f      	movs	r2, #31
 800195c:	4013      	ands	r3, r2
 800195e:	40d9      	lsrs	r1, r3
 8001960:	000b      	movs	r3, r1
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	080037f8 	.word	0x080037f8

08001970 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001978:	2313      	movs	r3, #19
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001980:	2312      	movs	r3, #18
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2240      	movs	r2, #64	@ 0x40
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001992:	e079      	b.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001994:	2011      	movs	r0, #17
 8001996:	183b      	adds	r3, r7, r0
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199c:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800199e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	055b      	lsls	r3, r3, #21
 80019a4:	4013      	ands	r3, r2
 80019a6:	d110      	bne.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	4b60      	ldr	r3, [pc, #384]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ac:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019ae:	2180      	movs	r1, #128	@ 0x80
 80019b0:	0549      	lsls	r1, r1, #21
 80019b2:	430a      	orrs	r2, r1
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	055b      	lsls	r3, r3, #21
 80019be:	4013      	ands	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c4:	183b      	adds	r3, r7, r0
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80019ca:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ce:	23c0      	movs	r3, #192	@ 0xc0
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d019      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d014      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80019e6:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	4a51      	ldr	r2, [pc, #324]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019f0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019f4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019f6:	2180      	movs	r1, #128	@ 0x80
 80019f8:	0249      	lsls	r1, r1, #9
 80019fa:	430a      	orrs	r2, r1
 80019fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019fe:	4b4b      	ldr	r3, [pc, #300]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a02:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a04:	494b      	ldr	r1, [pc, #300]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a06:	400a      	ands	r2, r1
 8001a08:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001a0a:	4b48      	ldr	r3, [pc, #288]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2201      	movs	r2, #1
 8001a14:	4013      	ands	r3, r2
 8001a16:	d016      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f97c 	bl	8000d14 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a20:	e00c      	b.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff f977 	bl	8000d14 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a42      	ldr	r2, [pc, #264]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d904      	bls.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001a32:	2313      	movs	r3, #19
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	2203      	movs	r2, #3
 8001a38:	701a      	strb	r2, [r3, #0]
          break;
 8001a3a:	e004      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0ed      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001a46:	2313      	movs	r3, #19
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10a      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a50:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	4a36      	ldr	r2, [pc, #216]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	4b33      	ldr	r3, [pc, #204]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a64:	e005      	b.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a66:	2312      	movs	r3, #18
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2213      	movs	r2, #19
 8001a6c:	18ba      	adds	r2, r7, r2
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a72:	2311      	movs	r3, #17
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a80:	4b2a      	ldr	r3, [pc, #168]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a82:	492e      	ldr	r1, [pc, #184]	@ (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a92:	4b26      	ldr	r3, [pc, #152]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a96:	2203      	movs	r2, #3
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	4013      	ands	r3, r2
 8001acc:	d008      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	0899      	lsrs	r1, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d009      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aee:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001b08:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	22e0      	movs	r2, #224	@ 0xe0
 8001b0e:	4393      	bics	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781b      	ldrb	r3, [r3, #0]
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b006      	add	sp, #24
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	fffffcff 	.word	0xfffffcff
 8001b34:	fffeffff 	.word	0xfffeffff
 8001b38:	00001388 	.word	0x00001388
 8001b3c:	efffffff 	.word	0xefffffff
 8001b40:	ffffcfff 	.word	0xffffcfff
 8001b44:	ffff3fff 	.word	0xffff3fff

08001b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e04a      	b.n	8001bf0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	223d      	movs	r2, #61	@ 0x3d
 8001b5e:	5c9b      	ldrb	r3, [r3, r2]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d107      	bne.n	8001b76 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	223c      	movs	r2, #60	@ 0x3c
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe feb1 	bl	80008d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	223d      	movs	r2, #61	@ 0x3d
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	0019      	movs	r1, r3
 8001b88:	0010      	movs	r0, r2
 8001b8a:	f000 fc73 	bl	8002474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2248      	movs	r2, #72	@ 0x48
 8001b92:	2101      	movs	r1, #1
 8001b94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	223e      	movs	r2, #62	@ 0x3e
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	223f      	movs	r2, #63	@ 0x3f
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2240      	movs	r2, #64	@ 0x40
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2241      	movs	r2, #65	@ 0x41
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	5499      	strb	r1, [r3, r2]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2242      	movs	r2, #66	@ 0x42
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2243      	movs	r2, #67	@ 0x43
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2244      	movs	r2, #68	@ 0x44
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2245      	movs	r2, #69	@ 0x45
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2246      	movs	r2, #70	@ 0x46
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2247      	movs	r2, #71	@ 0x47
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	223d      	movs	r2, #61	@ 0x3d
 8001bea:	2101      	movs	r1, #1
 8001bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e04a      	b.n	8001ca0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223d      	movs	r2, #61	@ 0x3d
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	223c      	movs	r2, #60	@ 0x3c
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 f841 	bl	8001ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	223d      	movs	r2, #61	@ 0x3d
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	0019      	movs	r1, r3
 8001c38:	0010      	movs	r0, r2
 8001c3a:	f000 fc1b 	bl	8002474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2248      	movs	r2, #72	@ 0x48
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223e      	movs	r2, #62	@ 0x3e
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	223f      	movs	r2, #63	@ 0x3f
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2240      	movs	r2, #64	@ 0x40
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	5499      	strb	r1, [r3, r2]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2241      	movs	r2, #65	@ 0x41
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2242      	movs	r2, #66	@ 0x42
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	5499      	strb	r1, [r3, r2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2243      	movs	r2, #67	@ 0x43
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2244      	movs	r2, #68	@ 0x44
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2245      	movs	r2, #69	@ 0x45
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2246      	movs	r2, #70	@ 0x46
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2247      	movs	r2, #71	@ 0x47
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	223d      	movs	r2, #61	@ 0x3d
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d108      	bne.n	8001cda <HAL_TIM_PWM_Start+0x22>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	223e      	movs	r2, #62	@ 0x3e
 8001ccc:	5c9b      	ldrb	r3, [r3, r2]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	4193      	sbcs	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	e037      	b.n	8001d4a <HAL_TIM_PWM_Start+0x92>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d108      	bne.n	8001cf2 <HAL_TIM_PWM_Start+0x3a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	223f      	movs	r2, #63	@ 0x3f
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	4193      	sbcs	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e02b      	b.n	8001d4a <HAL_TIM_PWM_Start+0x92>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d108      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x52>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2240      	movs	r2, #64	@ 0x40
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	1e5a      	subs	r2, r3, #1
 8001d04:	4193      	sbcs	r3, r2
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	e01f      	b.n	8001d4a <HAL_TIM_PWM_Start+0x92>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	d108      	bne.n	8001d22 <HAL_TIM_PWM_Start+0x6a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2241      	movs	r2, #65	@ 0x41
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	1e5a      	subs	r2, r3, #1
 8001d1c:	4193      	sbcs	r3, r2
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	e013      	b.n	8001d4a <HAL_TIM_PWM_Start+0x92>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d108      	bne.n	8001d3a <HAL_TIM_PWM_Start+0x82>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2242      	movs	r2, #66	@ 0x42
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	4193      	sbcs	r3, r2
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	e007      	b.n	8001d4a <HAL_TIM_PWM_Start+0x92>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2243      	movs	r2, #67	@ 0x43
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	4193      	sbcs	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e07b      	b.n	8001e4a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start+0xaa>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	223e      	movs	r2, #62	@ 0x3e
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	5499      	strb	r1, [r3, r2]
 8001d60:	e023      	b.n	8001daa <HAL_TIM_PWM_Start+0xf2>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0xba>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	223f      	movs	r2, #63	@ 0x3f
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	5499      	strb	r1, [r3, r2]
 8001d70:	e01b      	b.n	8001daa <HAL_TIM_PWM_Start+0xf2>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_PWM_Start+0xca>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2240      	movs	r2, #64	@ 0x40
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	5499      	strb	r1, [r3, r2]
 8001d80:	e013      	b.n	8001daa <HAL_TIM_PWM_Start+0xf2>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d104      	bne.n	8001d92 <HAL_TIM_PWM_Start+0xda>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2241      	movs	r2, #65	@ 0x41
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	5499      	strb	r1, [r3, r2]
 8001d90:	e00b      	b.n	8001daa <HAL_TIM_PWM_Start+0xf2>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d104      	bne.n	8001da2 <HAL_TIM_PWM_Start+0xea>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2242      	movs	r2, #66	@ 0x42
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	5499      	strb	r1, [r3, r2]
 8001da0:	e003      	b.n	8001daa <HAL_TIM_PWM_Start+0xf2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2243      	movs	r2, #67	@ 0x43
 8001da6:	2102      	movs	r1, #2
 8001da8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 ff08 	bl	8002bc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	@ (8001e54 <HAL_TIM_PWM_Start+0x19c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d009      	beq.n	8001dd6 <HAL_TIM_PWM_Start+0x11e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a24      	ldr	r2, [pc, #144]	@ (8001e58 <HAL_TIM_PWM_Start+0x1a0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_TIM_PWM_Start+0x11e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	@ (8001e5c <HAL_TIM_PWM_Start+0x1a4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_PWM_Start+0x122>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_TIM_PWM_Start+0x124>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	0209      	lsls	r1, r1, #8
 8001dee:	430a      	orrs	r2, r1
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_TIM_PWM_Start+0x19c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d004      	beq.n	8001e06 <HAL_TIM_PWM_Start+0x14e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_TIM_PWM_Start+0x1a8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d116      	bne.n	8001e34 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <HAL_TIM_PWM_Start+0x1ac>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b06      	cmp	r3, #6
 8001e16:	d016      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x18e>
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	025b      	lsls	r3, r3, #9
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d011      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e32:	e008      	b.n	8001e46 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e000      	b.n	8001e48 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40014400 	.word	0x40014400
 8001e5c:	40014800 	.word	0x40014800
 8001e60:	40000400 	.word	0x40000400
 8001e64:	00010007 	.word	0x00010007

08001e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2202      	movs	r2, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d021      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d01d      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2203      	movs	r2, #3
 8001e96:	4252      	negs	r2, r2
 8001e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 fac8 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e007      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 fabb 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f000 fac7 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d022      	beq.n	8001f1a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d01e      	beq.n	8001f1a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	4252      	negs	r2, r2
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	23c0      	movs	r3, #192	@ 0xc0
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d004      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f000 faa1 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 8001f02:	e007      	b.n	8001f14 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fa94 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 faa0 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d021      	beq.n	8001f66 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4013      	ands	r3, r2
 8001f28:	d01d      	beq.n	8001f66 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2209      	movs	r2, #9
 8001f30:	4252      	negs	r2, r2
 8001f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2204      	movs	r2, #4
 8001f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2203      	movs	r2, #3
 8001f42:	4013      	ands	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 fa7b 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 8001f4e:	e007      	b.n	8001f60 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 fa6e 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 fa7a 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2210      	movs	r2, #16
 8001f72:	4013      	ands	r3, r2
 8001f74:	d01e      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2211      	movs	r2, #17
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2208      	movs	r2, #8
 8001f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	23c0      	movs	r3, #192	@ 0xc0
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d004      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fa54 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e007      	b.n	8001fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 fa47 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 fa53 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d00c      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d008      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4252      	negs	r2, r2
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 fa27 	bl	8002424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d104      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	019b      	lsls	r3, r3, #6
 8001fe4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001fe6:	d00b      	beq.n	8002000 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2280      	movs	r2, #128	@ 0x80
 8001fec:	4013      	ands	r3, r2
 8001fee:	d007      	beq.n	8002000 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <HAL_TIM_IRQHandler+0x208>)
 8001ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fe72 	bl	8002ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4013      	ands	r3, r2
 8002008:	d00b      	beq.n	8002022 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	4013      	ands	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <HAL_TIM_IRQHandler+0x20c>)
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 fe69 	bl	8002cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2240      	movs	r2, #64	@ 0x40
 8002026:	4013      	ands	r3, r2
 8002028:	d00c      	beq.n	8002044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	4013      	ands	r3, r2
 8002030:	d008      	beq.n	8002044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2241      	movs	r2, #65	@ 0x41
 8002038:	4252      	negs	r2, r2
 800203a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fa10 	bl	8002464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2220      	movs	r2, #32
 8002048:	4013      	ands	r3, r2
 800204a:	d00c      	beq.n	8002066 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	4013      	ands	r3, r2
 8002052:	d008      	beq.n	8002066 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2221      	movs	r2, #33	@ 0x21
 800205a:	4252      	negs	r2, r2
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 fe37 	bl	8002cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	ffffdf7f 	.word	0xffffdf7f
 8002074:	fffffeff 	.word	0xfffffeff

08002078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2317      	movs	r3, #23
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	223c      	movs	r2, #60	@ 0x3c
 8002090:	5c9b      	ldrb	r3, [r3, r2]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002096:	2302      	movs	r3, #2
 8002098:	e0e5      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	223c      	movs	r2, #60	@ 0x3c
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b14      	cmp	r3, #20
 80020a6:	d900      	bls.n	80020aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80020a8:	e0d1      	b.n	800224e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	009a      	lsls	r2, r3, #2
 80020ae:	4b70      	ldr	r3, [pc, #448]	@ (8002270 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	0011      	movs	r1, r2
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fa4a 	bl	8002558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2108      	movs	r1, #8
 80020d0:	430a      	orrs	r2, r1
 80020d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2104      	movs	r1, #4
 80020e0:	438a      	bics	r2, r1
 80020e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6999      	ldr	r1, [r3, #24]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	619a      	str	r2, [r3, #24]
      break;
 80020f6:	e0af      	b.n	8002258 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	0011      	movs	r1, r2
 8002100:	0018      	movs	r0, r3
 8002102:	f000 faa9 	bl	8002658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2180      	movs	r1, #128	@ 0x80
 8002112:	0109      	lsls	r1, r1, #4
 8002114:	430a      	orrs	r2, r1
 8002116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4954      	ldr	r1, [pc, #336]	@ (8002274 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002124:	400a      	ands	r2, r1
 8002126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6999      	ldr	r1, [r3, #24]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	021a      	lsls	r2, r3, #8
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	619a      	str	r2, [r3, #24]
      break;
 800213c:	e08c      	b.n	8002258 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	0011      	movs	r1, r2
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fb04 	bl	8002754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2108      	movs	r1, #8
 8002158:	430a      	orrs	r2, r1
 800215a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2104      	movs	r1, #4
 8002168:	438a      	bics	r2, r1
 800216a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69d9      	ldr	r1, [r3, #28]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	61da      	str	r2, [r3, #28]
      break;
 800217e:	e06b      	b.n	8002258 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f000 fb65 	bl	8002858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2180      	movs	r1, #128	@ 0x80
 800219a:	0109      	lsls	r1, r1, #4
 800219c:	430a      	orrs	r2, r1
 800219e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4932      	ldr	r1, [pc, #200]	@ (8002274 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69d9      	ldr	r1, [r3, #28]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	021a      	lsls	r2, r3, #8
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	61da      	str	r2, [r3, #28]
      break;
 80021c4:	e048      	b.n	8002258 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	0011      	movs	r1, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fba6 	bl	8002920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2108      	movs	r1, #8
 80021e0:	430a      	orrs	r2, r1
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2104      	movs	r1, #4
 80021f0:	438a      	bics	r2, r1
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002206:	e027      	b.n	8002258 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	0011      	movs	r1, r2
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fbdf 	bl	80029d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	0109      	lsls	r1, r1, #4
 8002224:	430a      	orrs	r2, r1
 8002226:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4910      	ldr	r1, [pc, #64]	@ (8002274 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002234:	400a      	ands	r2, r1
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	021a      	lsls	r2, r3, #8
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800224c:	e004      	b.n	8002258 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800224e:	2317      	movs	r3, #23
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
      break;
 8002256:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	223c      	movs	r2, #60	@ 0x3c
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]

  return status;
 8002260:	2317      	movs	r3, #23
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	781b      	ldrb	r3, [r3, #0]
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b006      	add	sp, #24
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	08003818 	.word	0x08003818
 8002274:	fffffbff 	.word	0xfffffbff

08002278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	230f      	movs	r3, #15
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223c      	movs	r2, #60	@ 0x3c
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_TIM_ConfigClockSource+0x20>
 8002294:	2302      	movs	r3, #2
 8002296:	e0bc      	b.n	8002412 <HAL_TIM_ConfigClockSource+0x19a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	223c      	movs	r2, #60	@ 0x3c
 800229c:	2101      	movs	r1, #1
 800229e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	223d      	movs	r2, #61	@ 0x3d
 80022a4:	2102      	movs	r1, #2
 80022a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4a5a      	ldr	r2, [pc, #360]	@ (800241c <HAL_TIM_ConfigClockSource+0x1a4>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4a59      	ldr	r2, [pc, #356]	@ (8002420 <HAL_TIM_ConfigClockSource+0x1a8>)
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2280      	movs	r2, #128	@ 0x80
 80022ce:	0192      	lsls	r2, r2, #6
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d040      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0xde>
 80022d4:	2280      	movs	r2, #128	@ 0x80
 80022d6:	0192      	lsls	r2, r2, #6
 80022d8:	4293      	cmp	r3, r2
 80022da:	d900      	bls.n	80022de <HAL_TIM_ConfigClockSource+0x66>
 80022dc:	e088      	b.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	0152      	lsls	r2, r2, #5
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d100      	bne.n	80022e8 <HAL_TIM_ConfigClockSource+0x70>
 80022e6:	e088      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x182>
 80022e8:	2280      	movs	r2, #128	@ 0x80
 80022ea:	0152      	lsls	r2, r2, #5
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d900      	bls.n	80022f2 <HAL_TIM_ConfigClockSource+0x7a>
 80022f0:	e07e      	b.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 80022f2:	2b70      	cmp	r3, #112	@ 0x70
 80022f4:	d018      	beq.n	8002328 <HAL_TIM_ConfigClockSource+0xb0>
 80022f6:	d900      	bls.n	80022fa <HAL_TIM_ConfigClockSource+0x82>
 80022f8:	e07a      	b.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 80022fa:	2b60      	cmp	r3, #96	@ 0x60
 80022fc:	d04f      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x126>
 80022fe:	d900      	bls.n	8002302 <HAL_TIM_ConfigClockSource+0x8a>
 8002300:	e076      	b.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 8002302:	2b50      	cmp	r3, #80	@ 0x50
 8002304:	d03b      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x106>
 8002306:	d900      	bls.n	800230a <HAL_TIM_ConfigClockSource+0x92>
 8002308:	e072      	b.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 800230a:	2b40      	cmp	r3, #64	@ 0x40
 800230c:	d057      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x146>
 800230e:	d900      	bls.n	8002312 <HAL_TIM_ConfigClockSource+0x9a>
 8002310:	e06e      	b.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 8002312:	2b30      	cmp	r3, #48	@ 0x30
 8002314:	d063      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x166>
 8002316:	d86b      	bhi.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 8002318:	2b20      	cmp	r3, #32
 800231a:	d060      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x166>
 800231c:	d868      	bhi.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
 800231e:	2b00      	cmp	r3, #0
 8002320:	d05d      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x166>
 8002322:	2b10      	cmp	r3, #16
 8002324:	d05b      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x166>
 8002326:	e063      	b.n	80023f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002338:	f000 fc26 	bl	8002b88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2277      	movs	r2, #119	@ 0x77
 8002348:	4313      	orrs	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	609a      	str	r2, [r3, #8]
      break;
 8002354:	e052      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002366:	f000 fc0f 	bl	8002b88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2180      	movs	r1, #128	@ 0x80
 8002376:	01c9      	lsls	r1, r1, #7
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
      break;
 800237c:	e03e      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	001a      	movs	r2, r3
 800238c:	f000 fb80 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2150      	movs	r1, #80	@ 0x50
 8002396:	0018      	movs	r0, r3
 8002398:	f000 fbda 	bl	8002b50 <TIM_ITRx_SetConfig>
      break;
 800239c:	e02e      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023aa:	001a      	movs	r2, r3
 80023ac:	f000 fb9e 	bl	8002aec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2160      	movs	r1, #96	@ 0x60
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fbca 	bl	8002b50 <TIM_ITRx_SetConfig>
      break;
 80023bc:	e01e      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ca:	001a      	movs	r2, r3
 80023cc:	f000 fb60 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2140      	movs	r1, #64	@ 0x40
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 fbba 	bl	8002b50 <TIM_ITRx_SetConfig>
      break;
 80023dc:	e00e      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0019      	movs	r1, r3
 80023e8:	0010      	movs	r0, r2
 80023ea:	f000 fbb1 	bl	8002b50 <TIM_ITRx_SetConfig>
      break;
 80023ee:	e005      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
      break;
 80023f8:	e000      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80023fa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	223d      	movs	r2, #61	@ 0x3d
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	223c      	movs	r2, #60	@ 0x3c
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

  return status;
 800240c:	230f      	movs	r3, #15
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	781b      	ldrb	r3, [r3, #0]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	ffceff88 	.word	0xffceff88
 8002420:	ffff00ff 	.word	0xffff00ff

08002424 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800243c:	46c0      	nop			@ (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800246c:	46c0      	nop			@ (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a2e      	ldr	r2, [pc, #184]	@ (8002540 <TIM_Base_SetConfig+0xcc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d003      	beq.n	8002494 <TIM_Base_SetConfig+0x20>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a2d      	ldr	r2, [pc, #180]	@ (8002544 <TIM_Base_SetConfig+0xd0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2270      	movs	r2, #112	@ 0x70
 8002498:	4393      	bics	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a25      	ldr	r2, [pc, #148]	@ (8002540 <TIM_Base_SetConfig+0xcc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00f      	beq.n	80024ce <TIM_Base_SetConfig+0x5a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <TIM_Base_SetConfig+0xd0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0x5a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <TIM_Base_SetConfig+0xd4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0x5a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a22      	ldr	r2, [pc, #136]	@ (800254c <TIM_Base_SetConfig+0xd8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_Base_SetConfig+0x5a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a21      	ldr	r2, [pc, #132]	@ (8002550 <TIM_Base_SetConfig+0xdc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d108      	bne.n	80024e0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a20      	ldr	r2, [pc, #128]	@ (8002554 <TIM_Base_SetConfig+0xe0>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	4393      	bics	r3, r2
 80024e6:	001a      	movs	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <TIM_Base_SetConfig+0xcc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <TIM_Base_SetConfig+0xa4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a10      	ldr	r2, [pc, #64]	@ (800254c <TIM_Base_SetConfig+0xd8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0xa4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0f      	ldr	r2, [pc, #60]	@ (8002550 <TIM_Base_SetConfig+0xdc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2204      	movs	r2, #4
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b004      	add	sp, #16
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40000400 	.word	0x40000400
 8002548:	40002000 	.word	0x40002000
 800254c:	40014400 	.word	0x40014400
 8002550:	40014800 	.word	0x40014800
 8002554:	fffffcff 	.word	0xfffffcff

08002558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	2201      	movs	r2, #1
 800256e:	4393      	bics	r3, r2
 8002570:	001a      	movs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a2e      	ldr	r2, [pc, #184]	@ (8002640 <TIM_OC1_SetConfig+0xe8>)
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2203      	movs	r2, #3
 800258e:	4393      	bics	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2202      	movs	r2, #2
 80025a0:	4393      	bics	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <TIM_OC1_SetConfig+0xec>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <TIM_OC1_SetConfig+0x6e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <TIM_OC1_SetConfig+0xf0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d003      	beq.n	80025c6 <TIM_OC1_SetConfig+0x6e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a22      	ldr	r2, [pc, #136]	@ (800264c <TIM_OC1_SetConfig+0xf4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10c      	bne.n	80025e0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2208      	movs	r2, #8
 80025ca:	4393      	bics	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2204      	movs	r2, #4
 80025dc:	4393      	bics	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a18      	ldr	r2, [pc, #96]	@ (8002644 <TIM_OC1_SetConfig+0xec>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <TIM_OC1_SetConfig+0xa0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <TIM_OC1_SetConfig+0xf0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <TIM_OC1_SetConfig+0xa0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <TIM_OC1_SetConfig+0xf4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d111      	bne.n	800261c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4a15      	ldr	r2, [pc, #84]	@ (8002650 <TIM_OC1_SetConfig+0xf8>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4a14      	ldr	r2, [pc, #80]	@ (8002654 <TIM_OC1_SetConfig+0xfc>)
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	621a      	str	r2, [r3, #32]
}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b006      	add	sp, #24
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	fffeff8f 	.word	0xfffeff8f
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40014400 	.word	0x40014400
 800264c:	40014800 	.word	0x40014800
 8002650:	fffffeff 	.word	0xfffffeff
 8002654:	fffffdff 	.word	0xfffffdff

08002658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	2210      	movs	r2, #16
 800266e:	4393      	bics	r3, r2
 8002670:	001a      	movs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a2c      	ldr	r2, [pc, #176]	@ (8002738 <TIM_OC2_SetConfig+0xe0>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <TIM_OC2_SetConfig+0xe4>)
 800268e:	4013      	ands	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2220      	movs	r2, #32
 80026a2:	4393      	bics	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a22      	ldr	r2, [pc, #136]	@ (8002740 <TIM_OC2_SetConfig+0xe8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10d      	bne.n	80026d6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2280      	movs	r2, #128	@ 0x80
 80026be:	4393      	bics	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2240      	movs	r2, #64	@ 0x40
 80026d2:	4393      	bics	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a19      	ldr	r2, [pc, #100]	@ (8002740 <TIM_OC2_SetConfig+0xe8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_OC2_SetConfig+0x96>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a18      	ldr	r2, [pc, #96]	@ (8002744 <TIM_OC2_SetConfig+0xec>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_OC2_SetConfig+0x96>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <TIM_OC2_SetConfig+0xf0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d113      	bne.n	8002716 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4a16      	ldr	r2, [pc, #88]	@ (800274c <TIM_OC2_SetConfig+0xf4>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <TIM_OC2_SetConfig+0xf8>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b006      	add	sp, #24
 8002736:	bd80      	pop	{r7, pc}
 8002738:	feff8fff 	.word	0xfeff8fff
 800273c:	fffffcff 	.word	0xfffffcff
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40014400 	.word	0x40014400
 8002748:	40014800 	.word	0x40014800
 800274c:	fffffbff 	.word	0xfffffbff
 8002750:	fffff7ff 	.word	0xfffff7ff

08002754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a31      	ldr	r2, [pc, #196]	@ (8002830 <TIM_OC3_SetConfig+0xdc>)
 800276a:	401a      	ands	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a2d      	ldr	r2, [pc, #180]	@ (8002834 <TIM_OC3_SetConfig+0xe0>)
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2203      	movs	r2, #3
 8002788:	4393      	bics	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <TIM_OC3_SetConfig+0xe4>)
 800279a:	4013      	ands	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a23      	ldr	r2, [pc, #140]	@ (800283c <TIM_OC3_SetConfig+0xe8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10d      	bne.n	80027ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <TIM_OC3_SetConfig+0xec>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <TIM_OC3_SetConfig+0xf0>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1a      	ldr	r2, [pc, #104]	@ (800283c <TIM_OC3_SetConfig+0xe8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <TIM_OC3_SetConfig+0x92>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <TIM_OC3_SetConfig+0xf4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d003      	beq.n	80027e6 <TIM_OC3_SetConfig+0x92>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <TIM_OC3_SetConfig+0xf8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d113      	bne.n	800280e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4a19      	ldr	r2, [pc, #100]	@ (8002850 <TIM_OC3_SetConfig+0xfc>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <TIM_OC3_SetConfig+0x100>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	621a      	str	r2, [r3, #32]
}
 8002828:	46c0      	nop			@ (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b006      	add	sp, #24
 800282e:	bd80      	pop	{r7, pc}
 8002830:	fffffeff 	.word	0xfffffeff
 8002834:	fffeff8f 	.word	0xfffeff8f
 8002838:	fffffdff 	.word	0xfffffdff
 800283c:	40012c00 	.word	0x40012c00
 8002840:	fffff7ff 	.word	0xfffff7ff
 8002844:	fffffbff 	.word	0xfffffbff
 8002848:	40014400 	.word	0x40014400
 800284c:	40014800 	.word	0x40014800
 8002850:	ffffefff 	.word	0xffffefff
 8002854:	ffffdfff 	.word	0xffffdfff

08002858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a24      	ldr	r2, [pc, #144]	@ (8002900 <TIM_OC4_SetConfig+0xa8>)
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a20      	ldr	r2, [pc, #128]	@ (8002904 <TIM_OC4_SetConfig+0xac>)
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a1f      	ldr	r2, [pc, #124]	@ (8002908 <TIM_OC4_SetConfig+0xb0>)
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4a1b      	ldr	r2, [pc, #108]	@ (800290c <TIM_OC4_SetConfig+0xb4>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	031b      	lsls	r3, r3, #12
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <TIM_OC4_SetConfig+0xb8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <TIM_OC4_SetConfig+0x70>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a16      	ldr	r2, [pc, #88]	@ (8002914 <TIM_OC4_SetConfig+0xbc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_OC4_SetConfig+0x70>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <TIM_OC4_SetConfig+0xc0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d109      	bne.n	80028dc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4a14      	ldr	r2, [pc, #80]	@ (800291c <TIM_OC4_SetConfig+0xc4>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b006      	add	sp, #24
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	ffffefff 	.word	0xffffefff
 8002904:	feff8fff 	.word	0xfeff8fff
 8002908:	fffffcff 	.word	0xfffffcff
 800290c:	ffffdfff 	.word	0xffffdfff
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800
 800291c:	ffffbfff 	.word	0xffffbfff

08002920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <TIM_OC5_SetConfig+0x9c>)
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a1d      	ldr	r2, [pc, #116]	@ (80029c0 <TIM_OC5_SetConfig+0xa0>)
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <TIM_OC5_SetConfig+0xa4>)
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <TIM_OC5_SetConfig+0xa8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <TIM_OC5_SetConfig+0x66>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <TIM_OC5_SetConfig+0xac>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_OC5_SetConfig+0x66>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <TIM_OC5_SetConfig+0xb0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d109      	bne.n	800299a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <TIM_OC5_SetConfig+0x9c>)
 800298a:	4013      	ands	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	621a      	str	r2, [r3, #32]
}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b006      	add	sp, #24
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	fffeffff 	.word	0xfffeffff
 80029c0:	fffeff8f 	.word	0xfffeff8f
 80029c4:	fffdffff 	.word	0xfffdffff
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800

080029d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a22      	ldr	r2, [pc, #136]	@ (8002a74 <TIM_OC6_SetConfig+0xa0>)
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002a78 <TIM_OC6_SetConfig+0xa4>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4a1a      	ldr	r2, [pc, #104]	@ (8002a7c <TIM_OC6_SetConfig+0xa8>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	051b      	lsls	r3, r3, #20
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <TIM_OC6_SetConfig+0xac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <TIM_OC6_SetConfig+0x68>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a15      	ldr	r2, [pc, #84]	@ (8002a84 <TIM_OC6_SetConfig+0xb0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_OC6_SetConfig+0x68>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a14      	ldr	r2, [pc, #80]	@ (8002a88 <TIM_OC6_SetConfig+0xb4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d109      	bne.n	8002a50 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4a13      	ldr	r2, [pc, #76]	@ (8002a8c <TIM_OC6_SetConfig+0xb8>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	029b      	lsls	r3, r3, #10
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	621a      	str	r2, [r3, #32]
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b006      	add	sp, #24
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	ffefffff 	.word	0xffefffff
 8002a78:	feff8fff 	.word	0xfeff8fff
 8002a7c:	ffdfffff 	.word	0xffdfffff
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	fffbffff 	.word	0xfffbffff

08002a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4393      	bics	r3, r2
 8002aaa:	001a      	movs	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	22f0      	movs	r2, #240	@ 0xf0
 8002aba:	4393      	bics	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	220a      	movs	r2, #10
 8002acc:	4393      	bics	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b006      	add	sp, #24
 8002aea:	bd80      	pop	{r7, pc}

08002aec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	2210      	movs	r2, #16
 8002b04:	4393      	bics	r3, r2
 8002b06:	001a      	movs	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <TIM_TI2_ConfigInputStage+0x60>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	031b      	lsls	r3, r3, #12
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	22a0      	movs	r2, #160	@ 0xa0
 8002b28:	4393      	bics	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b006      	add	sp, #24
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	ffff0fff 	.word	0xffff0fff

08002b50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a08      	ldr	r2, [pc, #32]	@ (8002b84 <TIM_ITRx_SetConfig+0x34>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	2207      	movs	r2, #7
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	609a      	str	r2, [r3, #8]
}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b004      	add	sp, #16
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	ffcfff8f 	.word	0xffcfff8f

08002b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <TIM_ETR_SetConfig+0x3c>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	46c0      	nop			@ (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b006      	add	sp, #24
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	ffff00ff 	.word	0xffff00ff

08002bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	221f      	movs	r2, #31
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	0013      	movs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	43d2      	mvns	r2, r2
 8002bea:	401a      	ands	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	211f      	movs	r1, #31
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4099      	lsls	r1, r3
 8002bfe:	000b      	movs	r3, r1
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b006      	add	sp, #24
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	223c      	movs	r2, #60	@ 0x3c
 8002c1e:	5c9b      	ldrb	r3, [r3, r2]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e04a      	b.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	223c      	movs	r2, #60	@ 0x3c
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	223d      	movs	r2, #61	@ 0x3d
 8002c34:	2102      	movs	r1, #2
 8002c36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d108      	bne.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a1d      	ldr	r2, [pc, #116]	@ (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2270      	movs	r2, #112	@ 0x70
 8002c68:	4393      	bics	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a11      	ldr	r2, [pc, #68]	@ (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a10      	ldr	r2, [pc, #64]	@ (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10c      	bne.n	8002cac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2280      	movs	r2, #128	@ 0x80
 8002c96:	4393      	bics	r3, r2
 8002c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	223d      	movs	r2, #61	@ 0x3d
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	223c      	movs	r2, #60	@ 0x3c
 8002cb8:	2100      	movs	r1, #0
 8002cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b004      	add	sp, #16
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	ff0fffff 	.word	0xff0fffff
 8002cd0:	40000400 	.word	0x40000400

08002cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e046      	b.n	8002da4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2288      	movs	r2, #136	@ 0x88
 8002d1a:	589b      	ldr	r3, [r3, r2]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2284      	movs	r2, #132	@ 0x84
 8002d24:	2100      	movs	r1, #0
 8002d26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7fd fe80 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2288      	movs	r2, #136	@ 0x88
 8002d34:	2124      	movs	r1, #36	@ 0x24
 8002d36:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 f9aa 	bl	80030ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f828 	bl	8002db0 <UART_SetConfig>
 8002d60:	0003      	movs	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e01c      	b.n	8002da4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	490d      	ldr	r1, [pc, #52]	@ (8002dac <HAL_UART_Init+0xa8>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	212a      	movs	r1, #42	@ 0x2a
 8002d86:	438a      	bics	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2101      	movs	r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 fa39 	bl	8003214 <UART_CheckIdleState>
 8002da2:	0003      	movs	r3, r0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	ffffb7ff 	.word	0xffffb7ff

08002db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db8:	231e      	movs	r3, #30
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4aab      	ldr	r2, [pc, #684]	@ (800308c <UART_SetConfig+0x2dc>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4aa6      	ldr	r2, [pc, #664]	@ (8003090 <UART_SetConfig+0x2e0>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a9d      	ldr	r2, [pc, #628]	@ (8003094 <UART_SetConfig+0x2e4>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	220f      	movs	r2, #15
 8002e34:	4393      	bics	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a93      	ldr	r2, [pc, #588]	@ (8003098 <UART_SetConfig+0x2e8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d127      	bne.n	8002e9e <UART_SetConfig+0xee>
 8002e4e:	4b93      	ldr	r3, [pc, #588]	@ (800309c <UART_SetConfig+0x2ec>)
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	2203      	movs	r2, #3
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d017      	beq.n	8002e8a <UART_SetConfig+0xda>
 8002e5a:	d81b      	bhi.n	8002e94 <UART_SetConfig+0xe4>
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d00a      	beq.n	8002e76 <UART_SetConfig+0xc6>
 8002e60:	d818      	bhi.n	8002e94 <UART_SetConfig+0xe4>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <UART_SetConfig+0xbc>
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d00a      	beq.n	8002e80 <UART_SetConfig+0xd0>
 8002e6a:	e013      	b.n	8002e94 <UART_SetConfig+0xe4>
 8002e6c:	231f      	movs	r3, #31
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e021      	b.n	8002eba <UART_SetConfig+0x10a>
 8002e76:	231f      	movs	r3, #31
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e01c      	b.n	8002eba <UART_SetConfig+0x10a>
 8002e80:	231f      	movs	r3, #31
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2204      	movs	r2, #4
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e017      	b.n	8002eba <UART_SetConfig+0x10a>
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2208      	movs	r2, #8
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e012      	b.n	8002eba <UART_SetConfig+0x10a>
 8002e94:	231f      	movs	r3, #31
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2210      	movs	r2, #16
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e00d      	b.n	8002eba <UART_SetConfig+0x10a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7f      	ldr	r2, [pc, #508]	@ (80030a0 <UART_SetConfig+0x2f0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d104      	bne.n	8002eb2 <UART_SetConfig+0x102>
 8002ea8:	231f      	movs	r3, #31
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e003      	b.n	8002eba <UART_SetConfig+0x10a>
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d000      	beq.n	8002ec8 <UART_SetConfig+0x118>
 8002ec6:	e06f      	b.n	8002fa8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002ec8:	231f      	movs	r3, #31
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d01f      	beq.n	8002f12 <UART_SetConfig+0x162>
 8002ed2:	dc22      	bgt.n	8002f1a <UART_SetConfig+0x16a>
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d017      	beq.n	8002f08 <UART_SetConfig+0x158>
 8002ed8:	dc1f      	bgt.n	8002f1a <UART_SetConfig+0x16a>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <UART_SetConfig+0x134>
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d005      	beq.n	8002eee <UART_SetConfig+0x13e>
 8002ee2:	e01a      	b.n	8002f1a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee4:	f7fe fd2c 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	61bb      	str	r3, [r7, #24]
        break;
 8002eec:	e01c      	b.n	8002f28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002eee:	4b6b      	ldr	r3, [pc, #428]	@ (800309c <UART_SetConfig+0x2ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	3301      	adds	r3, #1
 8002efa:	0019      	movs	r1, r3
 8002efc:	4869      	ldr	r0, [pc, #420]	@ (80030a4 <UART_SetConfig+0x2f4>)
 8002efe:	f7fd f903 	bl	8000108 <__udivsi3>
 8002f02:	0003      	movs	r3, r0
 8002f04:	61bb      	str	r3, [r7, #24]
        break;
 8002f06:	e00f      	b.n	8002f28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f08:	f7fe fcba 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	61bb      	str	r3, [r7, #24]
        break;
 8002f10:	e00a      	b.n	8002f28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e006      	b.n	8002f28 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f1e:	231e      	movs	r3, #30
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
        break;
 8002f26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d100      	bne.n	8002f30 <UART_SetConfig+0x180>
 8002f2e:	e097      	b.n	8003060 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f34:	4b5c      	ldr	r3, [pc, #368]	@ (80030a8 <UART_SetConfig+0x2f8>)
 8002f36:	0052      	lsls	r2, r2, #1
 8002f38:	5ad3      	ldrh	r3, [r2, r3]
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	69b8      	ldr	r0, [r7, #24]
 8002f3e:	f7fd f8e3 	bl	8000108 <__udivsi3>
 8002f42:	0003      	movs	r3, r0
 8002f44:	005a      	lsls	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	18d2      	adds	r2, r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0019      	movs	r1, r3
 8002f54:	0010      	movs	r0, r2
 8002f56:	f7fd f8d7 	bl	8000108 <__udivsi3>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b0f      	cmp	r3, #15
 8002f62:	d91c      	bls.n	8002f9e <UART_SetConfig+0x1ee>
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	2380      	movs	r3, #128	@ 0x80
 8002f68:	025b      	lsls	r3, r3, #9
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d217      	bcs.n	8002f9e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	200e      	movs	r0, #14
 8002f74:	183b      	adds	r3, r7, r0
 8002f76:	210f      	movs	r1, #15
 8002f78:	438a      	bics	r2, r1
 8002f7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2207      	movs	r2, #7
 8002f84:	4013      	ands	r3, r2
 8002f86:	b299      	uxth	r1, r3
 8002f88:	183b      	adds	r3, r7, r0
 8002f8a:	183a      	adds	r2, r7, r0
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	183a      	adds	r2, r7, r0
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e060      	b.n	8003060 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f9e:	231e      	movs	r3, #30
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e05b      	b.n	8003060 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa8:	231f      	movs	r3, #31
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d01f      	beq.n	8002ff2 <UART_SetConfig+0x242>
 8002fb2:	dc22      	bgt.n	8002ffa <UART_SetConfig+0x24a>
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d017      	beq.n	8002fe8 <UART_SetConfig+0x238>
 8002fb8:	dc1f      	bgt.n	8002ffa <UART_SetConfig+0x24a>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <UART_SetConfig+0x214>
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d005      	beq.n	8002fce <UART_SetConfig+0x21e>
 8002fc2:	e01a      	b.n	8002ffa <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f7fe fcbc 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	61bb      	str	r3, [r7, #24]
        break;
 8002fcc:	e01c      	b.n	8003008 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002fce:	4b33      	ldr	r3, [pc, #204]	@ (800309c <UART_SetConfig+0x2ec>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	3301      	adds	r3, #1
 8002fda:	0019      	movs	r1, r3
 8002fdc:	4831      	ldr	r0, [pc, #196]	@ (80030a4 <UART_SetConfig+0x2f4>)
 8002fde:	f7fd f893 	bl	8000108 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	61bb      	str	r3, [r7, #24]
        break;
 8002fe6:	e00f      	b.n	8003008 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe8:	f7fe fc4a 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8002fec:	0003      	movs	r3, r0
 8002fee:	61bb      	str	r3, [r7, #24]
        break;
 8002ff0:	e00a      	b.n	8003008 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	61bb      	str	r3, [r7, #24]
        break;
 8002ff8:	e006      	b.n	8003008 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ffe:	231e      	movs	r3, #30
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
        break;
 8003006:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d028      	beq.n	8003060 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003012:	4b25      	ldr	r3, [pc, #148]	@ (80030a8 <UART_SetConfig+0x2f8>)
 8003014:	0052      	lsls	r2, r2, #1
 8003016:	5ad3      	ldrh	r3, [r2, r3]
 8003018:	0019      	movs	r1, r3
 800301a:	69b8      	ldr	r0, [r7, #24]
 800301c:	f7fd f874 	bl	8000108 <__udivsi3>
 8003020:	0003      	movs	r3, r0
 8003022:	001a      	movs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	18d2      	adds	r2, r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0019      	movs	r1, r3
 8003032:	0010      	movs	r0, r2
 8003034:	f7fd f868 	bl	8000108 <__udivsi3>
 8003038:	0003      	movs	r3, r0
 800303a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d90a      	bls.n	8003058 <UART_SetConfig+0x2a8>
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	025b      	lsls	r3, r3, #9
 8003048:	429a      	cmp	r2, r3
 800304a:	d205      	bcs.n	8003058 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e003      	b.n	8003060 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003058:	231e      	movs	r3, #30
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	226a      	movs	r2, #106	@ 0x6a
 8003064:	2101      	movs	r1, #1
 8003066:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2268      	movs	r2, #104	@ 0x68
 800306c:	2101      	movs	r1, #1
 800306e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800307c:	231e      	movs	r3, #30
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	781b      	ldrb	r3, [r3, #0]
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b008      	add	sp, #32
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	cfff69f3 	.word	0xcfff69f3
 8003090:	ffffcfff 	.word	0xffffcfff
 8003094:	11fff4ff 	.word	0x11fff4ff
 8003098:	40013800 	.word	0x40013800
 800309c:	40021000 	.word	0x40021000
 80030a0:	40004400 	.word	0x40004400
 80030a4:	02dc6c00 	.word	0x02dc6c00
 80030a8:	0800386c 	.word	0x0800386c

080030ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	2208      	movs	r2, #8
 80030ba:	4013      	ands	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a4a      	ldr	r2, [pc, #296]	@ (80031f0 <UART_AdvFeatureConfig+0x144>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	2201      	movs	r2, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	d00b      	beq.n	80030f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a43      	ldr	r2, [pc, #268]	@ (80031f4 <UART_AdvFeatureConfig+0x148>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	2202      	movs	r2, #2
 80030fe:	4013      	ands	r3, r2
 8003100:	d00b      	beq.n	800311a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a3b      	ldr	r2, [pc, #236]	@ (80031f8 <UART_AdvFeatureConfig+0x14c>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	2204      	movs	r2, #4
 8003120:	4013      	ands	r3, r2
 8003122:	d00b      	beq.n	800313c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a34      	ldr	r2, [pc, #208]	@ (80031fc <UART_AdvFeatureConfig+0x150>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	2210      	movs	r2, #16
 8003142:	4013      	ands	r3, r2
 8003144:	d00b      	beq.n	800315e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <UART_AdvFeatureConfig+0x154>)
 800314e:	4013      	ands	r3, r2
 8003150:	0019      	movs	r1, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	2220      	movs	r2, #32
 8003164:	4013      	ands	r3, r2
 8003166:	d00b      	beq.n	8003180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4a25      	ldr	r2, [pc, #148]	@ (8003204 <UART_AdvFeatureConfig+0x158>)
 8003170:	4013      	ands	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	2240      	movs	r2, #64	@ 0x40
 8003186:	4013      	ands	r3, r2
 8003188:	d01d      	beq.n	80031c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <UART_AdvFeatureConfig+0x15c>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	035b      	lsls	r3, r3, #13
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10b      	bne.n	80031c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a15      	ldr	r2, [pc, #84]	@ (800320c <UART_AdvFeatureConfig+0x160>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003210 <UART_AdvFeatureConfig+0x164>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }
}
 80031e8:	46c0      	nop			@ (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	ffff7fff 	.word	0xffff7fff
 80031f4:	fffdffff 	.word	0xfffdffff
 80031f8:	fffeffff 	.word	0xfffeffff
 80031fc:	fffbffff 	.word	0xfffbffff
 8003200:	ffffefff 	.word	0xffffefff
 8003204:	ffffdfff 	.word	0xffffdfff
 8003208:	ffefffff 	.word	0xffefffff
 800320c:	ff9fffff 	.word	0xff9fffff
 8003210:	fff7ffff 	.word	0xfff7ffff

08003214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b092      	sub	sp, #72	@ 0x48
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2290      	movs	r2, #144	@ 0x90
 8003220:	2100      	movs	r1, #0
 8003222:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003224:	f7fd fd76 	bl	8000d14 <HAL_GetTick>
 8003228:	0003      	movs	r3, r0
 800322a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2208      	movs	r2, #8
 8003234:	4013      	ands	r3, r2
 8003236:	2b08      	cmp	r3, #8
 8003238:	d12d      	bne.n	8003296 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800323a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323c:	2280      	movs	r2, #128	@ 0x80
 800323e:	0391      	lsls	r1, r2, #14
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4a47      	ldr	r2, [pc, #284]	@ (8003360 <UART_CheckIdleState+0x14c>)
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	f000 f88e 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d022      	beq.n	8003296 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003250:	f3ef 8310 	mrs	r3, PRIMASK
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003258:	63bb      	str	r3, [r7, #56]	@ 0x38
 800325a:	2301      	movs	r3, #1
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			@ (mov r8, r8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2180      	movs	r1, #128	@ 0x80
 8003272:	438a      	bics	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2288      	movs	r2, #136	@ 0x88
 8003286:	2120      	movs	r1, #32
 8003288:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2284      	movs	r2, #132	@ 0x84
 800328e:	2100      	movs	r1, #0
 8003290:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e060      	b.n	8003358 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2204      	movs	r2, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d146      	bne.n	8003332 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a6:	2280      	movs	r2, #128	@ 0x80
 80032a8:	03d1      	lsls	r1, r2, #15
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003360 <UART_CheckIdleState+0x14c>)
 80032ae:	9200      	str	r2, [sp, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f000 f859 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d03b      	beq.n	8003332 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032ba:	f3ef 8310 	mrs	r3, PRIMASK
 80032be:	60fb      	str	r3, [r7, #12]
  return(result);
 80032c0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80032c4:	2301      	movs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f383 8810 	msr	PRIMASK, r3
}
 80032ce:	46c0      	nop			@ (mov r8, r8)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4922      	ldr	r1, [pc, #136]	@ (8003364 <UART_CheckIdleState+0x150>)
 80032dc:	400a      	ands	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032ec:	f3ef 8310 	mrs	r3, PRIMASK
 80032f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80032f2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032f6:	2301      	movs	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f383 8810 	msr	PRIMASK, r3
}
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2101      	movs	r1, #1
 800330e:	438a      	bics	r2, r1
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f383 8810 	msr	PRIMASK, r3
}
 800331c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	228c      	movs	r2, #140	@ 0x8c
 8003322:	2120      	movs	r1, #32
 8003324:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2284      	movs	r2, #132	@ 0x84
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e012      	b.n	8003358 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2288      	movs	r2, #136	@ 0x88
 8003336:	2120      	movs	r1, #32
 8003338:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	228c      	movs	r2, #140	@ 0x8c
 800333e:	2120      	movs	r1, #32
 8003340:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2284      	movs	r2, #132	@ 0x84
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b010      	add	sp, #64	@ 0x40
 800335e:	bd80      	pop	{r7, pc}
 8003360:	01ffffff 	.word	0x01ffffff
 8003364:	fffffedf 	.word	0xfffffedf

08003368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	1dfb      	adds	r3, r7, #7
 8003376:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003378:	e051      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	3301      	adds	r3, #1
 800337e:	d04e      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fd fcc8 	bl	8000d14 <HAL_GetTick>
 8003384:	0002      	movs	r2, r0
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e051      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2204      	movs	r2, #4
 80033a2:	4013      	ands	r3, r2
 80033a4:	d03b      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb6>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b80      	cmp	r3, #128	@ 0x80
 80033aa:	d038      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb6>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d035      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2208      	movs	r2, #8
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d111      	bne.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2208      	movs	r2, #8
 80033c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f83c 	bl	8003448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2290      	movs	r2, #144	@ 0x90
 80033d4:	2108      	movs	r1, #8
 80033d6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2284      	movs	r2, #132	@ 0x84
 80033dc:	2100      	movs	r1, #0
 80033de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e02c      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	401a      	ands	r2, r3
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d112      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2280      	movs	r2, #128	@ 0x80
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f81f 	bl	8003448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2290      	movs	r2, #144	@ 0x90
 800340e:	2120      	movs	r1, #32
 8003410:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2284      	movs	r2, #132	@ 0x84
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e00f      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	425a      	negs	r2, r3
 800342e:	4153      	adcs	r3, r2
 8003430:	b2db      	uxtb	r3, r3
 8003432:	001a      	movs	r2, r3
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d09e      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b004      	add	sp, #16
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	@ 0x38
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003450:	f3ef 8310 	mrs	r3, PRIMASK
 8003454:	617b      	str	r3, [r7, #20]
  return(result);
 8003456:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003458:	637b      	str	r3, [r7, #52]	@ 0x34
 800345a:	2301      	movs	r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4926      	ldr	r1, [pc, #152]	@ (800350c <UART_EndRxTransfer+0xc4>)
 8003472:	400a      	ands	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003478:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f383 8810 	msr	PRIMASK, r3
}
 8003480:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003482:	f3ef 8310 	mrs	r3, PRIMASK
 8003486:	623b      	str	r3, [r7, #32]
  return(result);
 8003488:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800348a:	633b      	str	r3, [r7, #48]	@ 0x30
 800348c:	2301      	movs	r3, #1
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	f383 8810 	msr	PRIMASK, r3
}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	491b      	ldr	r1, [pc, #108]	@ (8003510 <UART_EndRxTransfer+0xc8>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d118      	bne.n	80034ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034bc:	f3ef 8310 	mrs	r3, PRIMASK
 80034c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80034c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c6:	2301      	movs	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2110      	movs	r1, #16
 80034de:	438a      	bics	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	228c      	movs	r2, #140	@ 0x8c
 80034f2:	2120      	movs	r1, #32
 80034f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b00e      	add	sp, #56	@ 0x38
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	fffffedf 	.word	0xfffffedf
 8003510:	effffffe 	.word	0xeffffffe

08003514 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2284      	movs	r2, #132	@ 0x84
 8003520:	5c9b      	ldrb	r3, [r3, r2]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_UARTEx_DisableFifoMode+0x16>
 8003526:	2302      	movs	r3, #2
 8003528:	e027      	b.n	800357a <HAL_UARTEx_DisableFifoMode+0x66>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2284      	movs	r2, #132	@ 0x84
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2288      	movs	r2, #136	@ 0x88
 8003536:	2124      	movs	r1, #36	@ 0x24
 8003538:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	438a      	bics	r2, r1
 8003550:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003556:	4013      	ands	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2288      	movs	r2, #136	@ 0x88
 800356c:	2120      	movs	r1, #32
 800356e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2284      	movs	r2, #132	@ 0x84
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b004      	add	sp, #16
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	dfffffff 	.word	0xdfffffff

08003588 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2284      	movs	r2, #132	@ 0x84
 8003596:	5c9b      	ldrb	r3, [r3, r2]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800359c:	2302      	movs	r3, #2
 800359e:	e02e      	b.n	80035fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2284      	movs	r2, #132	@ 0x84
 80035a4:	2101      	movs	r1, #1
 80035a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2288      	movs	r2, #136	@ 0x88
 80035ac:	2124      	movs	r1, #36	@ 0x24
 80035ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	08d9      	lsrs	r1, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f854 	bl	800368c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2288      	movs	r2, #136	@ 0x88
 80035f0:	2120      	movs	r1, #32
 80035f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2284      	movs	r2, #132	@ 0x84
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2284      	movs	r2, #132	@ 0x84
 8003616:	5c9b      	ldrb	r3, [r3, r2]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800361c:	2302      	movs	r3, #2
 800361e:	e02f      	b.n	8003680 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2284      	movs	r2, #132	@ 0x84
 8003624:	2101      	movs	r1, #1
 8003626:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2288      	movs	r2, #136	@ 0x88
 800362c:	2124      	movs	r1, #36	@ 0x24
 800362e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	438a      	bics	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4a0e      	ldr	r2, [pc, #56]	@ (8003688 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 f813 	bl	800368c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2288      	movs	r2, #136	@ 0x88
 8003672:	2120      	movs	r1, #32
 8003674:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2284      	movs	r2, #132	@ 0x84
 800367a:	2100      	movs	r1, #0
 800367c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}
 8003688:	f1ffffff 	.word	0xf1ffffff

0800368c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800368c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	226a      	movs	r2, #106	@ 0x6a
 80036a0:	2101      	movs	r1, #1
 80036a2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2268      	movs	r2, #104	@ 0x68
 80036a8:	2101      	movs	r1, #1
 80036aa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036ac:	e043      	b.n	8003736 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036ae:	260f      	movs	r6, #15
 80036b0:	19bb      	adds	r3, r7, r6
 80036b2:	2208      	movs	r2, #8
 80036b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036b6:	200e      	movs	r0, #14
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	2208      	movs	r2, #8
 80036bc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	0e5b      	lsrs	r3, r3, #25
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	240d      	movs	r4, #13
 80036ca:	193b      	adds	r3, r7, r4
 80036cc:	2107      	movs	r1, #7
 80036ce:	400a      	ands	r2, r1
 80036d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	0f5b      	lsrs	r3, r3, #29
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	250c      	movs	r5, #12
 80036de:	197b      	adds	r3, r7, r5
 80036e0:	2107      	movs	r1, #7
 80036e2:	400a      	ands	r2, r1
 80036e4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	197a      	adds	r2, r7, r5
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	4914      	ldr	r1, [pc, #80]	@ (8003740 <UARTEx_SetNbDataToProcess+0xb4>)
 80036f0:	5c8a      	ldrb	r2, [r1, r2]
 80036f2:	435a      	muls	r2, r3
 80036f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80036f6:	197b      	adds	r3, r7, r5
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <UARTEx_SetNbDataToProcess+0xb8>)
 80036fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036fe:	0019      	movs	r1, r3
 8003700:	f7fc fd8c 	bl	800021c <__divsi3>
 8003704:	0003      	movs	r3, r0
 8003706:	b299      	uxth	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	226a      	movs	r2, #106	@ 0x6a
 800370c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800370e:	19bb      	adds	r3, r7, r6
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	193a      	adds	r2, r7, r4
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	490a      	ldr	r1, [pc, #40]	@ (8003740 <UARTEx_SetNbDataToProcess+0xb4>)
 8003718:	5c8a      	ldrb	r2, [r1, r2]
 800371a:	435a      	muls	r2, r3
 800371c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800371e:	193b      	adds	r3, r7, r4
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	4a08      	ldr	r2, [pc, #32]	@ (8003744 <UARTEx_SetNbDataToProcess+0xb8>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003726:	0019      	movs	r1, r3
 8003728:	f7fc fd78 	bl	800021c <__divsi3>
 800372c:	0003      	movs	r3, r0
 800372e:	b299      	uxth	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2268      	movs	r2, #104	@ 0x68
 8003734:	5299      	strh	r1, [r3, r2]
}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b005      	add	sp, #20
 800373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	08003884 	.word	0x08003884
 8003744:	0800388c 	.word	0x0800388c

08003748 <memset>:
 8003748:	0003      	movs	r3, r0
 800374a:	1882      	adds	r2, r0, r2
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	7019      	strb	r1, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	2600      	movs	r6, #0
 800375c:	4c0c      	ldr	r4, [pc, #48]	@ (8003790 <__libc_init_array+0x38>)
 800375e:	4d0d      	ldr	r5, [pc, #52]	@ (8003794 <__libc_init_array+0x3c>)
 8003760:	1b64      	subs	r4, r4, r5
 8003762:	10a4      	asrs	r4, r4, #2
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	2600      	movs	r6, #0
 800376a:	f000 f819 	bl	80037a0 <_init>
 800376e:	4c0a      	ldr	r4, [pc, #40]	@ (8003798 <__libc_init_array+0x40>)
 8003770:	4d0a      	ldr	r5, [pc, #40]	@ (800379c <__libc_init_array+0x44>)
 8003772:	1b64      	subs	r4, r4, r5
 8003774:	10a4      	asrs	r4, r4, #2
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	00b3      	lsls	r3, r6, #2
 800377e:	58eb      	ldr	r3, [r5, r3]
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	00b3      	lsls	r3, r6, #2
 8003788:	58eb      	ldr	r3, [r5, r3]
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	08003894 	.word	0x08003894
 8003794:	08003894 	.word	0x08003894
 8003798:	08003898 	.word	0x08003898
 800379c:	08003894 	.word	0x08003894

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
